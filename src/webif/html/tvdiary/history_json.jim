#!/mod/bin/jimsh
#
# Render the details of all program activities sharing either the title and synopsis,
# or just the title, of the one identified by the program or title ID.
# If the program ID is supplied then the title and synopsis text is matched.
# If the title ID is supplied then just the title is matched.
# All of their record and playback activities are listed.
# After successfully rendering the data, the value "status" is set to "OK".
# If there is an error, "status" is set to the "<error message>".
# Clients should therefore check "status" first. If there is a serious server error part way
# through rendering, the JSON may be malformed and not parsable.
#
# CGI usage: /tvdiary/history_json.jim?prog_id=<program_id>|title_id=<title_id>|channel_id=<channel_id>|title=<title>|synopsis=<synopsis>|channel=<channel>
#   program_id = the program ID.
#
#   title_id = the title ID.
#   channel_id = the channel ID.
#
#   title = the title text.
#   synopsis = the synopsis text.
#   channel = the channel text.
#   title_op = the title operator [E|C|S|F].
#   synopsis_op = the synopsis operator [E|C|S|F].
#   channel_op = the channel operator [E|C|S|F].
#
# Author: Martin Wink, 2014.
#

package require cgi
source /mod/webif/lib/setup
source /mod/webif/html/tvdiary/tvdiary_db.jim
require mwildcard

if { ![exists -proc sqlite3.open] } { package require sqlite3 }

# --------------------------------------------------------------
# Declare globals
# --------------------------------------------------------------
set current_time [clock seconds]
set time_fmt "%H:%M"
set date_time_fmt "%a %d %b %Y $time_fmt"

set DB_FILEPATH "/mod/etc/tvdiary.db"

set channel_icons_path "/mod/webif/html/img/channels/out"
set channel_icons_url "/img/channels/out"

# --------------------------------------------------------------
# CGI parameters
# --------------------------------------------------------------
set runmode cli
if { [dict exists $env "REQUEST_METHOD"] } { set runmode cgi }

case $runmode {
  cgi {
    cgi_input
    set program_id [cgi_get program_id]

    set title_id [cgi_get title_id]
    set channel_id [cgi_get channel_id]

    set title [cgi_get title]
    set synopsis [cgi_get synopsis]
    set channel [cgi_get channel]

    set title_op [cgi_get title_op]
    set synopsis_op [cgi_get synopsis_op]
    set channel_op [cgi_get channel_op]
    httpheader "application/json"
  }
  cli {
    puts "Usage: $argv0 only runs as CGI."
    exit -1
  }
}

# In case of error - break glass!
#puts "/* "
#foreach key [lsort [dict keys $env]] {puts "env($key)=$env($key)"}
#puts "auto_path=$auto_path"
#puts "*/"

# --------------------------------------------------------------
# Declare procedures
# --------------------------------------------------------------

#
# Initialize a map from control characters to JSON escaped characters. 
# Initially all non-null control characters to \u00xx sequences.
for {set i 1} {$i < 32} {incr i} {
  set json_escape_map([format %c $i]) \\u[format %04x $i]
}
# Then overwrite certain well known control characters with shorter versions.
set json_escape_map([format %c 8]) \\b; # backspace
set json_escape_map([format %c 9]) \\t; # tab
set json_escape_map([format %c 10]) \\n; # lf
set json_escape_map([format %c 12]) \\f; # ff
set json_escape_map([format %c 13]) \\r; # cr
# Other special sequences
set json_escape_map(\") {\"}
set json_escape_map(\\) {\\}
set json_escape_map(/)  {\/}

#
# Escape a string for inclusion in JSON output.
#
proc escape_json_string { in } {
  return [string map $::json_escape_map $in]
}

#
# Convert from op code to operator text.
#
proc op_code_to_operator { op } {
  if { $op eq "E" } {
    return "="
  } else {
    return "LIKE"
  }
}

#
# Convert from op code to parameter text.
#
proc op_code_to_parameter { op val } {
  if { $op eq "C" } {
    return "%[mwildcard $val]%"
  } elseif { $op eq "S" } {
    return "[mwildcard $val]%"
  } elseif { $op eq "F" } {
    return "%[mwildcard $val]"
  } else {
    return "[mwildcard $val]"
  }
}

#
# Main
#
proc main {} {
  # begin_debug
  #puts "/* Parameters:
  #  program_id=$::program_id
  #  title_id=$::title_id
  #  channel_id=$::channel_id
  #  title=$::title
  #  synopsis=$::synopsis
  #  channel=$::channel */"
  #  title_op=$::title_op
  #  synopsis_op=$::synopsis_op
  #  channel_op=$::channel_op */"
  # end_debug

  #
  # Check we have a database, and open it, else HTTP error.
  #
  if { ![file exists $::DB_FILEPATH] } {
    # Ajax detects the error if we just exit.
    throw error "The tvdiary.db database is missing."
  }

  #
  # Get a lock for the database
  #
  if {![acquire_lock tvdiary_db]} {
    throw error "Timed out acquiring exclusive access to the database. Try again later."
  }

  set tvdiarydb [sqlite3.open $::DB_FILEPATH]

  # Separate queries to populate the records depending on parameters.
  if { [cgi_exists program_id] } {
    # If the program ID is supplied, find the title_id and synopsis_id to search on, and their text to return in the JSON.
    set records [$tvdiarydb query "
      SELECT programs.title_id, programs.synopsis_id, titles.title, synopses.synopsis
      FROM programs, titles, synopses
      WHERE program_id =  %s AND programs.title_id = titles.title_id AND programs.synopsis_id = synopses.synopsis_id
      LIMIT 1" $::program_id]
    set record [lindex $records 0]
    set ::title_id $record(title_id)
    set ::synopsis_id $record(synopsis_id)
    set ::title $record(title)
    set ::synopsis $record(synopsis)

    # The records exclude the title and synopsis because they're the search criteria.
    set records [$tvdiarydb query "
      SELECT activities.type, activities.start, activities.end, channels.channel_name, activities.program_id
      FROM activities, programs, channels
      WHERE programs.title_id = %s AND programs.synopsis_id = %s AND activities.program_id = programs.program_id AND programs.channel_id = channels.channel_id
      ORDER BY activities.start" $::title_id $::synopsis_id]
  } elseif { [cgi_exists title_id] } {
    # If the title_id supplied, then exact match, with the channel_id if it's supplied.
    set records [$tvdiarydb query "SELECT titles.title FROM titles WHERE titles.title_id = %s LIMIT 1" $::title_id]
    set record [lindex $records 0]
    set ::title $record(title)

    if { [cgi_exists channel_id] } {
      set records [$tvdiarydb query "SELECT channels.channel_name FROM channels WHERE channels.channel_id = %s LIMIT 1" $::channel_id]
      set record [lindex $records 0]
      set ::channel_name $record(channel_name)

      set records [$tvdiarydb query "
        SELECT activities.type, activities.start, activities.end, channels.channel_name, titles.title, synopses.synopsis, activities.program_id
        FROM activities, programs, channels, titles, synopses
        WHERE programs.title_id = %s AND programs.channel_id = %s AND activities.program_id = programs.program_id
          AND programs.channel_id = channels.channel_id AND programs.title_id = titles.title_id AND programs.synopsis_id = synopses.synopsis_id
        ORDER BY activities.start" $::title_id $::channel_id]
    } else {
      set records [$tvdiarydb query "
        SELECT activities.type, activities.start, activities.end, channels.channel_name, titles.title, synopses.synopsis, activities.program_id
        FROM activities, programs, channels, titles, synopses
        WHERE programs.title_id = %s AND activities.program_id = programs.program_id
          AND programs.channel_id = channels.channel_id AND programs.title_id = titles.title_id AND programs.synopsis_id = synopses.synopsis_id
        ORDER BY activities.start" $::title_id]
    }
  } else {
    # If not program or title ID, then the raw text parameters.
    set title_operator [op_code_to_operator $::title_op]
    set synopsis_operator [op_code_to_operator $::synopsis_op]
    set channel_operator [op_code_to_operator $::channel_op]
    set records [$tvdiarydb query "
      SELECT activities.type, activities.start, activities.end, channels.channel_name, titles.title, synopses.synopsis, activities.program_id
      FROM activities, programs, channels, titles, synopses
      WHERE ('%s' = '' OR titles.title $title_operator '%s')
        AND ('%s' = '' OR channels.channel_name $channel_operator '%s')
        AND ('%s' = '' OR synopses.synopsis $synopsis_operator '%s')
        AND activities.program_id = programs.program_id
        AND programs.channel_id = channels.channel_id
        AND programs.title_id = titles.title_id
        AND programs.synopsis_id = synopses.synopsis_id
      ORDER BY activities.start" $::title [op_code_to_parameter $::title_op $::title] $::channel [op_code_to_parameter $::channel_op $::channel] $::synopsis [op_code_to_parameter $::synopsis_op $::synopsis]]
  }

  # Finished with the DB.
  $tvdiarydb close

  #
  # Closed the DB so release the lock.
  #
  release_lock tvdiary_db

  puts "{"
  if { [cgi_exists program_id] } {
    puts " \"program_id\": $::program_id,"
    puts " \"title\": \"[escape_json_string $::title]\","
    puts " \"synopsis\": \"[escape_json_string $::synopsis]\","
  } elseif { [cgi_exists title_id] } {
    puts " \"title_id\": $::title_id,"
    puts " \"title\": \"[escape_json_string $::title]\","
    if { [cgi_exists channel_id] } {
      puts " \"channel_id\": $::channel_id,"
      puts " \"channel_name\": \"[escape_json_string $::channel_name]\","
    }
  } else {
    puts " \"title\": \"[escape_json_string $::title]\","
    puts " \"synopsis\": \"[escape_json_string $::synopsis]\","
    puts " \"channel_name\": \"[escape_json_string $::channel]\","
    puts " \"title_op\": \"[escape_json_string $::title_op]\","
    puts " \"synopsis_op\": \"[escape_json_string $::synopsis_op]\","
    puts " \"channel_name_op\": \"[escape_json_string $::channel_op]\","
  }
  puts -nonewline " \"events\": \["

  if { [llength $records] > 0 } {
    set comma 0
    foreach record $records {
      if { $comma } {
        puts ","
      } else {
        puts ""
        set comma 1
      }

      # Default in case of old W records.
      set typeclass "play"
      case $record(type) {
        R {
          set typeclass "record"
        }
        P {
          set typeclass "play"
        }
        L {
          set typeclass "live"
        }
      }

      puts "{"
      puts " \"type\": \"$typeclass\","
      puts " \"program_id\": $record(program_id),"
      puts " \"start\": $record(start),"
      puts " \"end\": $record(end),"
      if { [cgi_exists program_id] } {
        puts " \"title\": \"[escape_json_string $::title]\","
        puts " \"synopsis\": \"[escape_json_string $::synopsis]\","
      } else {
        puts " \"title\": \"[escape_json_string $record(title)]\","
        puts " \"synopsis\": \"[escape_json_string $record(synopsis)]\","
      }
      puts " \"channel_name\": \"[escape_json_string $record(channel_name)]\","

      set channel_icon_path "$::channel_icons_url/Unknown.png"
      if { $record(channel_name) != "" } {
        if { [file exists "$::channel_icons_path/$record(channel_name).png"] } {
          set channel_icon_path "$::channel_icons_url/[cgi_quote_url $record(channel_name)].png"
        } else {
          set channel_icon_path "$::channel_icons_url/Unknown.png"
        }
      }
      puts " \"channel_icon_path\": \"$channel_icon_path\""

      puts -nonewline "}"
    }
  }
  puts ""
  puts " \],"

  puts " \"status\": \"OK\""
  puts "}"
}

try {
  main
} on error { msg } {
  puts "{ \"status\": \"[escape_json_string $msg]\" }"
}

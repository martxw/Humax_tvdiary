#!/mod/bin/jimsh
#
# Render the table of what was recorded, will be recorded, or was watched on a given date.
# Called over CGI to update a page, or as a CLI for hosting on a different server.
# If there is no data, or on error, a span is rendered instead of a table.
#
# CGI usage: /tvdiary/day_view.jim?start=<time_start>&type=<type>
# CLI usage: day_view.jim <time_start> <type> [<icons_path> <icons_url>]
#   time_start = seconds since 1 Jan 1970 epoch.
#   type = R or W for Recorded or Watched (including both Played and Live watched).
#   icons_path = disk path to the TV channel icons.
#   icons_url = URL path to the TV channel icons.
#
# Author: Martin Wink, 2013.
#

package require cgi
source /mod/webif/lib/setup
require altrow rsv.class epg.class

if { ![exists -proc sqlite3.open] } { package require sqlite3 }

# --------------------------------------------------------------
# Declare globals
# --------------------------------------------------------------
set current_time [clock seconds]
set time_fmt "%H:%M"
set date_time_fmt "%a %d %b %Y $time_fmt"

set DB_FILEPATH "/mod/etc/tvdiary.db"

set channel_icons_path "/mod/webif/html/img/channels/out"
set channel_icons_url "/img/channels/out"

# Accumulte a map from "<time>:<channel-name>" to {service_id start_time end_time}.
set future_events {}

# --------------------------------------------------------------
# CGI or command line parameters
# --------------------------------------------------------------
set runmode cli
if { [dict exists $env "REQUEST_METHOD"] } { set runmode cgi }

case $runmode {
  cgi {
    cgi_input
    set time_start [cgi_get start]
    set type [cgi_get type]
    httpheader "text/html"
  }
  cli {
    if { $argc != 2 && $argc != 4 } {
      puts "Usage: $argv0 <time_start> <type> \[<icons_path> <icons_url>\]"
      puts " time_start = seconds since 1 Jan 1970 epoch"
      puts " type = R or W for Recorded or Watched (including both Played and Live watched)"
      puts " icons_path = disk path to the TV channel icons"
      puts " icons_url = URL path to the TV channel icons"
      puts ""
      puts "Eg: $argv0 $current_time R"
      puts "Eg: $argv0 $current_time R $channel_icons_path $channel_icons_url"
      exit -1
    }
    set time_start [lindex $argv 0]
    set type [lindex $argv 1]
    if { $argc == 4 } {
      set channel_icons_path [lindex $argv 2]
      set channel_icons_url [lindex $argv 3]
    }
  }
}
set time_end [expr $time_start + 86400]

# TODO: Possibly add CGI and cli parameters to exclude the future events if not needed.
set include_future_events 1

# In case of error - break glass!
#puts "<!-- "
#foreach key [lsort [dict keys $env]] {puts "env($key)=$env($key)"}
#puts "auto_path=$auto_path"
#puts "-->"

# --------------------------------------------------------------
# Declare procedures
# --------------------------------------------------------------

#
# Output the table row for one record of past details.
#
proc output_past_record { record } {
  # Default in case of old W records.
  set typeclass "play_event"
  case $record(type) {
    R {
      set typeclass "record_event"
    }
    P {
      set typeclass "play_event"
    }
    L {
      set typeclass "live_event"
    }
  }

  if { $record(unfinished) } {
    set activeclass "active_event"
  } else {
    set activeclass ""
  }

  set calculated_duration [expr ($record(end) - $record(start) + 30) / 60]

  puts "<tr class=\"event_row $typeclass $activeclass\" event_start=\"$record(start)\" event_end=\"$record(end)\" event_duration=\"$calculated_duration\">"

  #
  # Column 1. The actual record or watching time. This is always known.
  #
  puts "<td class=\"event_time\">"
  puts "<div class=\"event_start\">[clock format $record(start) -format $::time_fmt]</div>"
  if {$calculated_duration == 1} { set min_mins "min" } else { set min_mins "mins" }
  puts "<div class=\"event_duration\">($calculated_duration $min_mins)</div>"
  puts "<div class=\"event_end\">[clock format $record(end) -format $::time_fmt]</div>"
  puts "</td>"

  #
  # Column 2. The channel icon and name. There might not be a channel, and the icon may not exist.
  #
  puts "<td class=\"tvchannel\">"
  if { $record(channel_name) != "" } {
    if { [file exists "$::channel_icons_path/$record(channel_name).png"] } {
      puts "<img src=\"$::channel_icons_url/[cgi_quote_url $record(channel_name)].png\" width=50 alt=\"[cgi_quote_html $record(channel_name)]\"/>"
    } else {
      puts "<img src=\"$::channel_icons_url/Unknown.png\" width=50/>"
    }
    puts "<div>[cgi_quote_html $record(channel_name)]</div>"
  }
  puts "</td>"

  #
  # Column 3. There will always be a title. There might not be a synopsis, and there might not be sheduled time and duration.
  puts "<td class=\"event_descr\">"
  puts "<span class=\"tvtitle\">[cgi_quote_html $record(title)]</span>"
  if { $record(synopsis) != "" } {
    puts "<span class=\"tvsynopsis\">[cgi_quote_html $record(synopsis)]</span>"
  }
  if { $record(scheduled_start) != 0 && $record(scheduled_duration) != 0 } {
    if {$record(scheduled_duration) == 1} { set min_mins "min" } else { set min_mins "mins" }
    puts "<span class=\"tvschedule\">([clock format $record(scheduled_start) -format $::date_time_fmt], $record(scheduled_duration) $min_mins)</span>"
  }
  puts "</td>"

  puts "</tr>"
}

#
# Output the table row for a future event.
#
proc output_future_event { service_id channel_name event_start event_end } {
  # Get the EPG entry for the other details displayed.
  # NB: Adding 1 second because the EPG class checks > rather than >= start time.
  # NB2: It is possible that the EPG entry doesn't get found, so be prepared to substitute "No information".
  set epgs [epg dbfetch get -service $service_id -time [expr $event_start + 1]]
  if { [llength $epgs] == 1 } {
    lassign $epgs epg
    set title [$epg get name]
    set synopsis [$epg get text]
    set channel_name [$epg get channel_name]
  } else {
    set title "Not in EPG"
    set synopsis "No information available"
    # channel_name was passed in.
  }

  set calculated_duration [expr ($event_end - $event_start + 30) / 60]

  puts "<tr class=\"event_row future_event\" event_start=\"$event_start\" event_end=\"$event_end\" event_duration=\"$calculated_duration\">"

  #
  # Column 1. The scheduled record time. This is always present.
  #
  puts "<td class=\"event_time\">"
  puts "<div class=\"event_start\">[clock format $event_start -format $::time_fmt]</div>"
  if {$calculated_duration == 1} { set min_mins "min" } else { set min_mins "mins" }
  puts "<div class=\"event_duration\">($calculated_duration $min_mins)</div>"
  puts "<div class=\"event_end\">[clock format $event_end -format $::time_fmt]</div>"
  puts "</td>"

  #
  # Column 2. The channel icon and name. The channel icon may not exist.
  #
  puts "<td class=\"tvchannel\">"
  if { [file exists "$::channel_icons_path/$channel_name.png"] } {
    puts "<img src=\"$::channel_icons_url/[cgi_quote_url $channel_name].png\" width=50 alt=\"[cgi_quote_html $channel_name]\"/>"
  } else {
    puts "<img src=\"$::channel_icons_url/Unknown.png\" width=50/>"
  }
  puts "<div>[cgi_quote_html $channel_name]</div>"
  puts "</td>"

  #
  # Column 3. There will always be a title. There should be a synopsis, and sheduled time and duration.
  puts "<td class=\"event_descr\">"
  puts "<span class=\"tvtitle\">[cgi_quote_html $title]</span>"
  puts "<span class=\"tvsynopsis\">[cgi_quote_html $synopsis]</span>"
  if {$calculated_duration == 1} { set min_mins "min" } else { set min_mins "mins" }
  puts "<span class=\"tvschedule\">([clock format $event_start -format $::date_time_fmt], $calculated_duration $min_mins)</span>"
  puts "</td>"

  puts "</tr>"
}

#
# Convert from the handle of a service to the service ID.
# (Consider caching results to avoid repeated queries.)
#
proc hsvc_to_svcid { hsvc } {
  if { $hsvc == 0 } { return 0 }
  set _svcid [$::rsvdb query "SELECT usSvcid FROM channel.TBL_SVC WHERE hSvc = $hsvc LIMIT 1"]
  if { [llength $_svcid] != 1 } {
    throw error "Failed to get svcid for hsvc=$hsvc"
  }
  set svcid [lindex [lindex $_svcid 0] 1]
  return $svcid;
}

#
# Filter by time and add an entry to ::future_events.
#
proc filter_and_add_to_future_events {start end service_id channel_name} {
  if { $end >= $::time_start && $end > $::current_time && $start < $::time_end } {
    set key "$start:$channel_name"
    set vals [concat $service_id $start $end]
    dict set ::future_events $key $vals
    return 1
  }
  return 0
}

#
# Filter the events and add future events to the global $::future_events.
#
proc add_future_event { event } {
  set in 0
  # 3 == recording vs. a reminder, wake-up, sleep or auto-update event.
  if { [$event get ersvtype] == 3 } {
    set ucRecKind [$event get ucRecKind]
    # 1 == one-off, 4 == series.
    if { $ucRecKind == 1 || $ucRecKind == 4 } {

      # We have to check the entry's own time AND the times from its series link list.
      set elist [$event aul]
      foreach e $elist {
        lassign $e hservice start end event_id
        set in [filter_and_add_to_future_events $start $end [hsvc_to_svcid $hservice] [$event channel_name]]
      }

      set in [filter_and_add_to_future_events [$event get nsttime] [expr [$event get nsttime] + [$event get nduration]] [hsvc_to_svcid [$event get hsvc]] [$event channel_name]]
    }
  }
  return $in
}

#
# Main
#
proc main {} {
  # begin_debug
  #  puts "<pre>Parameters:
  #  time_start=$::time_start=[clock format $::time_start]
  #  time_end=$::time_end=[clock format $::time_end]
  #  type=$::type</pre>"
  # end_debug

  #
  # Check we have a database, and open it, else HTTP error.
  #
  if { ![file exists $::DB_FILEPATH] } {
    # Ajax detects the error if we just exit.
    throw error "The tvdiary.db database is missing."
  }
  set tvdiarydb [sqlite3.open $::DB_FILEPATH]

  #
  # Query the set of records for the specified type and time range.
  #
  if {$::type == "R"} {
    set type_clause "activities.type='R'"
  } else {
    set type_clause "activities.type!='R'"
  }
  set records [$tvdiarydb query "
    SELECT activities.start, activities.type, activities.end, activities.unfinished, programs.channel_name, programs.title, programs.synopsis, programs.start AS scheduled_start, programs.duration AS scheduled_duration
    FROM activities, programs
    WHERE $type_clause AND activities.end > %s AND activities.start < %s AND activities.program_id=programs.program_id
    ORDER BY activities.start" $::time_start $::time_end]

  # Finished with the DB.
  $tvdiarydb close

  #
  # Determine if future recording events need to be included.
  #
  if { $::include_future_events && $::type == "R" && $::time_end > $::current_time } {
    # Get the details of the scheduled events.
    set events [rsv list]
    foreach event $events {
      add_future_event $event
    }

    # I considered processing the pending scheduled events here to add or remove from the map,
    # but pending events only have the first occurance of a series. So I can't
    # add anything but the first, and I can't remove anything but the first.
    # So, took the policy decision that the diary predicts what will be recorded
    # if you don't restart the machine.
  }

  if { [llength $records] > 0 || [llength $::future_events] > 0 } {
    #
    # Corner case: I initially suppressed future events immediately after their start time, but
    # this results in events disappearing for a couple of minutes until the show has actually
    # started and more than a minute has been recorded.
    # So instead, suppress by spotting & removing duplicates.
    #
    # NB: It's arguable that future events that should have started but not yet finished
    # should be included, but marked as active, and that the filtering be done in JavaScript.
    # That way the minutes remaining to be recorded can be included in the total counts.
    #
    if { [llength $records] > 0 && [llength $::future_events] > 0 } {
      foreach record $records {
        set key "$record(scheduled_start):$record(channel_name)"
        if { [dict exists $::future_events $key]  } {
          dict unset ::future_events $key
        }
      }
    }

    puts "<table class=\"events_table\">"

    foreach record $records {
      output_past_record $record
    }

    set keys [lsort [dict keys $::future_events]]
    foreach key $keys {
      set vals [dict get $::future_events $key]
      lassign $vals service_id start_time end_time
      lassign [split $key ":"] x channel_name
      output_future_event $service_id $channel_name $start_time $end_time
    }

    puts "</table>"
  } else {
    #
    # For zero length results.
    #
    puts "<span class=\"nothing\">Nothing</span>"
  }
}

if { $runmode == "cgi" } {
  try {
    main
  } on error { msg } {
    puts "<span class=\"nothing\">Error: $msg</span>"
  }
} else {
  main
}

#!/mod/bin/jimsh
#
# Experimental.
# Render the details of the .ts video files under the My Video directory.
# Called over CGI to update a page, or as a CLI for hosting on a different server.
# After successfully rendering the data, the value "status" is set to "OK".
# If the modified parameter is supplied and the inventory is no newer, status will
# be set to "UNMODIFIED". If there is an error, "status" is set to "<error message>".
# Clients should therefore check "status" first. If there is a serious server error part way
# through rendering, the JSON may be malformed and not parsable.
#
# CGI usage: /tvdiary/inventory_json.jim[?modified=<time>]
# CLI usage: inventory_json.jim [<icons_path> <icons_url>]
#   <time> = optional timestamp of current inventory results held by the client.
#   icons_path = disk path to the TV channel icons.
#   icons_url = URL path to the TV channel icons.
#
# Author: Martin Wink, 2014.
#

package require cgi
source /mod/webif/lib/setup
source /mod/webif/html/tvdiary/tvdiary_db.jim

if { ![exists -proc sqlite3.open] } { package require sqlite3 }

# --------------------------------------------------------------
# Declare globals
# --------------------------------------------------------------
set current_time [clock seconds]
set time_fmt "%H:%M"
set date_time_fmt "%a %d %b %Y $time_fmt"

set channel_icons_path "/mod/webif/html/img/channels/out"
set channel_icons_url "/img/channels/out"

set clients_modified 0

# --------------------------------------------------------------
# CGI or command line parameters
# --------------------------------------------------------------
set runmode cli
if { [dict exists $env "REQUEST_METHOD"] } { set runmode cgi }

case $runmode {
  cgi {
    cgi_input
    set clients_modified [cgi_get modified]
    httpheader "application/json"
  }
  cli {
    if { $argc != 0 && $argc != 2 } {
      puts "Usage: $argv0 \[<icons_path> <icons_url>\]"
      puts " icons_path = disk path to the TV channel icons"
      puts " icons_url = URL path to the TV channel icons"
      puts ""
      puts "Eg: $argv0"
      puts "Eg: $argv0 $channel_icons_path $channel_icons_url"
      exit -1
    }
    if { $argc == 2 } {
      set channel_icons_path [lindex $argv 0]
      set channel_icons_url [lindex $argv 1]
    }
  }
}

# In case of error - break glass!
#puts "/* "
#foreach key [lsort [dict keys $env]] {puts "env($key)=$env($key)"}
#puts "auto_path=$auto_path"
#puts "*/"

# --------------------------------------------------------------
# Declare procedures
# --------------------------------------------------------------

#
# Common output of a table row.
#
proc output_record { record } {
  puts " {"
  puts "  \"inventory_id\": $record(inventory_id),"
  puts "  \"directory\": \"$record(directory)\","
  puts "  \"filename\": \"$record(filename)\","
  puts "  \"size\": $record(size),"
  
  set channel_name $record(channel_name)
  puts "  \"channel_name\": \"[escape_json_string $channel_name]\","
  set channel_icon_path "$::channel_icons_url/Unknown.png"
  if { $channel_name != "" } {
    if { [file exists "$::channel_icons_path/$channel_name.png"] } {
      set channel_icon_path "$::channel_icons_url/[cgi_quote_url $channel_name].png"
    } else {
      set channel_icon_path "$::channel_icons_url/Unknown.png"
    }
  }
  puts "  \"channel_icon_path\": \"$channel_icon_path\","

  set filepath "$record(directory)/$record(filename)"
  set thumbnail [file exists "[file rootname $filepath].thm"]
  puts "  \"has_thumbnail\": [expr { $thumbnail ? {true} : {false} }],"
  
  set repeat_id $record(repeat_id)
  if { $repeat_id == {} } {
    set repeat_id -1
  }
  puts "  \"repeat_id\": $repeat_id,"

  if { $record(watched) } {
    set watched "true"
  } else {
    set watched "false"
  }
  puts "  \"watched\": $watched,"

  set event_duration [expr ($record(event_end) - $record(event_start) + 30) / 60]
  puts "  \"title\": \"[escape_json_string $record(title)]\","
  puts "  \"synopsis\": \"[escape_json_string $record(synopsis)]\","
  puts "  \"event_start\": $record(event_start),"
  puts "  \"event_duration\": $event_duration,"
  puts "  \"scheduled_start\": $record(scheduled_start),"
  puts "  \"scheduled_duration\": $record(scheduled_duration)"
  puts -nonewline " }"
}

#
# Main
#
proc main {} {
  # begin_debug
  #  puts "/* Parameters:
  #  clients_modified=$::clients_modified */"
  # end_debug

  #
  # Check we have a database, and open it, else HTTP error.
  #
  if { ![file exists $::DB_FILEPATH] } {
    # Ajax detects the error if we just exit.
    throw error "The tvdiary.db database is missing."
  }

  #
  # Get a lock for the database
  #
  if {![acquire_lock tvdiary_db]} {
    throw error "Timed out acquiring exclusive access to the database. Try again later."
  }

  set tvdiarydb [sqlite3.open $::DB_FILEPATH]

  #
  # Update the cached inventory.
  #
  update_inventory $tvdiarydb [system mediaroot] [system dustbin]

  set last_modified [get_setting $tvdiarydb "inventory_modified"]

  #
  # Check whether to short-circuit the full results if the client already has the data.
  set short_circuit 0
  if { $::clients_modified } {
    if { $::clients_modified == $last_modified } {
      set short_circuit 1
      puts "{"
      puts " \"modified\": $last_modified,"
      puts " \"status\": \"UNMODIFIED\""
      puts "}"
    }
  }

  if { !$short_circuit } {
    #
    # Query the inventory for generating JSON.
    #
    set records [$tvdiarydb query "
      SELECT i.inventory_id, i.flag, i.directory, i.filename, i.size, c.channel_name, t.title, s.synopsis, i.event_start, i.event_end, i.scheduled_start, i.scheduled_duration,
      (SELECT COUNT(*) FROM activities, programs
        WHERE programs.start = i.scheduled_start AND programs.channel_id = i.channel_id
          AND activities.program_id = programs.program_id AND (activities.type = 'P' OR activities.type = 'L') AND activities.end != 0) AS watched,
      (SELECT program_id FROM programs WHERE programs.title_id = i.title_id AND programs.synopsis_id = i.synopsis_id AND programs.start != i.scheduled_start) AS repeat_id
      FROM inventory i, channels c, titles t, synopses s
      WHERE c.channel_id = i.channel_id AND t.title_id = i.title_id AND s.synopsis_id  = i.synopsis_id
      ORDER BY directory, event_start DESC, title"]
  }

  # Finished with the DB.
  $tvdiarydb close

  #
  # Closed the DB so release the lock.
  #
  release_lock tvdiary_db
  
  if { !$short_circuit } {
    puts "{"
    puts -nonewline " \"events\": \["
    set comma 0
    foreach record $records {
      if { $comma } {
        puts ","
      } else {
        puts ""
        set comma 1
      }
      output_record $record
    }
    puts ""
    puts " \],"

    puts " \"modified\": $last_modified,"
    puts " \"status\": \"OK\""
    puts "}"
  }
}

if { $runmode == "cgi" } {
  try {
    main
  } on error { msg } {
    puts "{ \"status\": \"[escape_json_string $msg]\" }"
  }
} else {
  main
}

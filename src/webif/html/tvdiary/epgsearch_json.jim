#!/mod/bin/jimsh
#
# Render the details of all program activities sharing either the title and synopsis,
# or just the title, of the one identified by the program or title ID.
# If the program ID is supplied then the title and synopsis text is matched.
# If the title ID is supplied then just the title is matched.
# All of their record and playback activities are listed.
# After successfully rendering the data, the value "status" is set to "OK".
# If there is an error, "status" is set to the "<error message>".
# Clients should therefore check "status" first. If there is a serious server error part way
# through rendering, the JSON may be malformed and not parsable.
#
# CGI usage: /tvdiary/epgsearch_json.jim?title_op=[E|C|S|F]&title=<title>&synopsis_op=[E|C|S|F]&synopsis=<synopsis>&channel_op=[E|C|S|F]&channel=<channel>
#   title_op = the title operator [E|C|S|F].
#   title = the title text.
#   synopsis_op = the synopsis operator [E|C|S|F].
#   synopsis = the synopsis text.
#   channel_op = the channel operator [E|C|S|F].
#   channel = the channel text.
#
# Author: Martin Wink, 2017.
#

package require cgi
source /mod/webif/lib/setup
require mwildcard
source /mod/webif/html/tvdiary/tvdiary_utils.jim
source /mod/webif/html/tvdiary/tvdiary_stub.jim

# --------------------------------------------------------------
# Declare globals
# --------------------------------------------------------------
set current_time [clock seconds]
set time_fmt "%H:%M"
set date_time_fmt "%a %d %b %Y $time_fmt"

set channel_icons_path "/mod/webif/html/img/channels/out"
set channel_icons_url "/img/channels/out"


# --------------------------------------------------------------
# CGI parameters
# --------------------------------------------------------------
set runmode cli
if { [dict exists $env "REQUEST_METHOD"] } { set runmode cgi }

case $runmode {
  cgi {
    cgi_input
    set title [cgi_get title]
    set synopsis [cgi_get synopsis]
    set channel [cgi_get channel]

    set title_op [cgi_get title_op]
    set synopsis_op [cgi_get synopsis_op]
    set channel_op [cgi_get channel_op]
    httpheader "application/json"
  }
  cli {
    set title ""
    set synopsis ""
    set channel ""
    set title_op ""
    set synopsis_op ""
    set channel_op ""
    if { $argc == 8 } {
      set title_op [lindex $argv 0]
      set title [lindex $argv 1]
      set synopsis_op [lindex $argv 2]
      set synopsis [lindex $argv 3]
      set channel_op [lindex $argv 4]
      set channel [lindex $argv 5]
      set channel_icons_path [lindex $argv 6]
      set channel_icons_url [lindex $argv 7]
    } else {
      puts "Usage: $argv0 <title_op> <title> <synopsis_op> <synopsis> <channel_op> <channel> <icons_path> <icons_url>"
      puts "  title_op = the title operator \[E|C|S|F\]."
      puts "  title = the title text."
      puts "  synopsis_op = the synopsis operator \[E|C|S|F\]."
      puts "  synopsis = the synopsis text."
      puts "  channel_op = the channel operator \[E|C|S|F\]."
      puts "  channel = the channel text."
      puts "  icons_path = disk path to the TV channel icons"
      puts "  icons_url = URL path to the TV channel icons"
      puts ""
      puts "Eg: $argv0 E \"\" C \"cycle\" E \"\" $channel_icons_path $channel_icons_url"
      exit -1
    }
  }
}

# In case of error - break glass!
#puts "/* "
#foreach key [lsort [dict keys $env]] {puts "env($key)=$env($key)"}
#puts "auto_path=$auto_path"
#puts "*/"

# --------------------------------------------------------------
# Declare procedures
# --------------------------------------------------------------

#
# Convert from op code to operator text.
#
proc op_code_to_operator { op } {
  if { $op eq "E" } {
    return "="
  } else {
    return "LIKE"
  }
}

#
# Convert from op code to parameter text.
#
proc op_code_to_parameter { op val } {
  if { $op eq "C" } {
    return "%[mwildcard $val]%"
  } elseif { $op eq "S" } {
    return "[mwildcard $val]%"
  } elseif { $op eq "F" } {
    return "%[mwildcard $val]"
  } else {
    return "[mwildcard $val]"
  }
}

#
# Main
#
proc main {} {
  # begin_debug
  #puts "/* Parameters:
  #  title=$::title
  #  synopsis=$::synopsis
  #  channel=$::channel */"
  #  title_op=$::title_op
  #  synopsis_op=$::synopsis_op
  #  channel_op=$::channel_op */"
  # end_debug

  # Check parameters were supplied.
  if { $::title_op == {} || $::synopsis_op == {} || $::channel_op == {} } {
    throw error "All comparison operators must be supplied."
  }
  if { $::title == {} && $::synopsis == {} && $::channel == {} } {
    throw error "At least one search value must be specified."
  }

  #
  # Check we have a database, and open it, else HTTP error.
  #
  if { ![file exists $::DB_FILEPATH] } {
    throw error "The $::DB_FILEPATH database is missing."
  }
  if { ![file exists $::EPG_DB_PATH] } {
    throw error "The $::EPG_DB_PATH database is missing."
  }
  if { ![file exists $::CHANNEL_DB_PATH] } {
    throw error "The $::CHANNEL_DB_PATH database is missing."
  }
  if { ![file exists $::RSV_DB_PATH] } {
    throw error "The $::RSV_DB_PATH database is missing."
  }

  #
  # Get a lock for the database
  #
  if {![acquire_lock tvdiary_db]} {
    throw error "Timed out acquiring exclusive access to the database. Try again later."
  }

  set tvdiarydb [sqlite3.open $::DB_FILEPATH]
  $tvdiarydb query {attach database '%s' as channel} $::CHANNEL_DB_PATH
  $tvdiarydb query {attach database '%s' as epg} $::EPG_DB_PATH
  $tvdiarydb query {attach database '%s' as rsv} $::RSV_DB_PATH
  
  # Build list of events to check whether search results are scheduled for recording.
  set future_events [build_future_events_list $tvdiarydb 0 [clock seconds]]

  # For marking alternative times/channels of scheduled recordings.
  set crid_recordings [crid_ucRecKind_from_future_events $future_events]

  set title_operator [op_code_to_operator $::title_op]
  set synopsis_operator [op_code_to_operator $::synopsis_op]
  set channel_operator [op_code_to_operator $::channel_op]

  set records [$tvdiarydb query "
    SELECT SUBSTR(c.szSvcName, 2) AS channel_name, e.name AS title, e.text AS synopsis, e.start, e.end, e.duration, e.event_crid, e.series_crid, e.rec_crid, e.service_id, e.event_id,
      (SELECT COUNT(*) FROM programs WHERE programs.crid = e.event_crid AND LENGTH(programs.crid) > 0) as repeat_crid_count,
      (SELECT program_id
        FROM programs, titles, synopses
        WHERE programs.title_id = titles.title_id
          AND programs.synopsis_id = synopses.synopsis_id
          AND titles.title = e.name
          AND synopses.synopsis = e.text
          AND EXISTS (SELECT activity_id FROM activities WHERE activities.program_id = programs.program_id AND (activities.type = 'P' OR activities.type = 'L') AND activities.end != 0 ) LIMIT 1) AS repeat_program_id
    FROM epg.epg e, channel.TBL_SVC c
    WHERE e.end >= %s
      AND e.service_id = c.usSvcId
      AND c.eSvcType = 1
      AND ('%s' = '' OR e.name $title_operator '%s')
      AND ('%s' = '' OR SUBSTR(c.szSvcName, 2) $channel_operator '%s')
      AND ('%s' = '' OR e.text $synopsis_operator '%s')
    ORDER BY e.start
    LIMIT 1001" [clock seconds] $::title [op_code_to_parameter $::title_op $::title] $::channel [op_code_to_parameter $::channel_op $::channel] $::synopsis [op_code_to_parameter $::synopsis_op $::synopsis]]

  # Finished with the DBs.
  $tvdiarydb close

  #
  # Closed the DB so release the lock.
  #
  release_lock tvdiary_db

  puts "{"
  puts " \"title_op\": \"[escape_json_string $::title_op]\","
  puts " \"title\": \"[escape_json_string $::title]\","
  puts " \"synopsis_op\": \"[escape_json_string $::synopsis_op]\","
  puts " \"synopsis\": \"[escape_json_string $::synopsis]\","
  puts " \"channel_name_op\": \"[escape_json_string $::channel_op]\","
  puts " \"channel_name\": \"[escape_json_string $::channel]\","
  puts -nonewline " \"events\": \["

  if { [llength $records] > 0 } {
    set comma 0
    foreach record $records {
      if { $comma } {
        puts ","
      } else {
        puts ""
        set comma 1
      }

      puts "{"
      puts " \"title\": \"[escape_json_string $record(title)]\","
      puts " \"synopsis\": \"[escape_json_string $record(synopsis)]\","
      puts " \"channel_name\": \"[escape_json_string $record(channel_name)]\","

      set channel_icon_path "$::channel_icons_url/Unknown.png"
      if { $record(channel_name) != "" } {
        if { [file exists "$::channel_icons_path/$record(channel_name).png"] } {
          set channel_icon_path "$::channel_icons_url/[cgi_quote_url $record(channel_name)].png"
        } else {
          set channel_icon_path "$::channel_icons_url/Unknown.png"
        }
      }
      puts " \"channel_icon_path\": \"$channel_icon_path\","

      puts " \"start\": $record(start),"
      puts " \"end\": $record(end),"
      puts " \"duration\": [duration_seconds_to_minutes $record(duration)],"
      puts " \"event_crid\": \"$record(event_crid)\","
      #puts " \"rec_crid\": \"$record(rec_crid)\","
      puts " \"service_id\": \"$record(service_id)\","
      puts " \"event_id\": \"$record(event_id)\","
      puts " \"series_crid\": \"$record(series_crid)\","

      # Count of already recorded programs with the same event_crid.
      puts " \"repeat_crid_count\": $record(repeat_crid_count),"

      # The first matching program_id.
      if { $record(repeat_program_id) == {} } {
        set repeat_program_id -1
      } else {
        set repeat_program_id $record(repeat_program_id)
      }
      puts " \"repeat_program_id\": $repeat_program_id,"

      # Check if the event is in the schedule.
      set ucRecKind 0
      set scheduled_slot -1
      set key "$record(start):$record(channel_name)"
      if { [dict exists $future_events $key] } {
        set vals [dict get $future_events $key]
        set ucRecKind $vals(ucRecKind)
        set scheduled_slot $vals(scheduled_slot)
      }
      puts " \"ucRecKind\": $ucRecKind,"
      puts " \"scheduled_slot\": $scheduled_slot,"

      # Check for events with the same CRID in the schedule.
      set ucRecKind 0
      if { [dict exists $crid_recordings $record(event_crid)] } {
        set ucRecKind [dict get $crid_recordings $record(event_crid)]
      }
      puts " \"crid_ucRecKind\": $ucRecKind"

      puts -nonewline "}"
    }
  }
  puts ""
  puts " \],"

  puts " \"status\": \"OK\""
  puts "}"
}

if { $runmode == "cgi" } {
  try {
    main
  } on error { msg } {
    puts "{ \"status\": \"[escape_json_string $msg]\" }"
  }
} else {
  main
}

#!/mod/bin/jimsh

source /mod/webif/lib/setup
require ts.class

if { ![exists -proc sqlite3.open] } { package require sqlite3 }

set DB_FILEPATH "/mod/etc/tvdiary.db"

# Locate the EPG DB file on this type of machine.
set EPG_DB_PATH "/mnt/hd1/epg.db"
set ALT_EPG_DB_PATH "/media/drive1/epg.db"
if {![file exists $EPG_DB_PATH] && [file exists $ALT_EPG_DB_PATH]} {
  set EPG_DB_PATH $ALT_EPG_DB_PATH
}
set CHANNEL_DB_PATH "/var/lib/humaxtv/channel.db"
set RSV_DB_PATH "/var/lib/humaxtv/rsv.db"

set WATCHLIST_FILEPATH "/mod/etc/tvdiary_watchlist.txt"
set WATCHLIST_FILEPATH_NEW "/mod/etc/tvdiary_watchlist.new"
set WATCHLIST_FILEPATH_BAK "/mod/etc/tvdiary_watchlist.bak"

set MEDIA_FILE_EXTENSIONS {.avi .mpg .mpeg .wmv .mkv .mp3 .mp4 .mov}


######
# Locking based on webif/lib/lock with retry loop added.
######
if { [dict exists $env "REQUEST_METHOD"] } {
  set log_locking 0
} else {
  set log_locking 0
}

proc _lock_to_port {id} {
  set len [string length $id]
  set hash $len

  for {set i 0} {$i < $len} {incr i} {
    scan [string index $id $i] "%c" asc
    set hash [expr (($hash<<5)^($hash>>27))^$asc];
  }

  return [expr (65535 - ($hash % 101))]
}

proc _lock_dummy {newsock addr port} { }

proc acquire_lock {id {wait_time 15}} {
  global _locks

  set port [_lock_to_port $id]

  # Max # seconds timeout.
  set timeout $wait_time

  # 'socket already in use' error will be our lock detection mechanism
  incr timeout [clock seconds]
  if {$::log_locking} { puts "acquire_lock{$id} port:$port now:[clock seconds] timeout:$timeout" }
  while {[catch {set socket [socket stream.server "127.0.0.1:$port"]} msg]} {
    if { [clock seconds] > $timeout } {
      if {$::log_locking} { puts "Could not aquire lock" }
      return 0
    }
    if {$::log_locking} { puts "acquire_lock{$id} starting retry sleep at [clock seconds]" }
    sleep 0.2
  }

  set _locks($id) $socket
  if {$::log_locking} { puts "acquire_lock{$id} succeeded at [clock seconds]" }
  return 1
}

proc release_lock {id} {
  global _locks

  if {$::log_locking} { puts "release_lock{$id} at [clock seconds]" }
  if {[catch {close $_locks($id)} msg]} {
    if {$::log_locking} { puts "Error releasing lock: $msg" }
    return 0
  }
  unset _locks($id)
  return 1
}


######
# Common JSON code.
######

#
# Initialize a map from control characters to JSON escaped characters. 
# Initially all non-null control characters to \u00xx sequences.
for {set i 1} {$i < 32} {incr i} {
  set json_escape_map([format %c $i]) \\u[format %04x $i]
}
# Then overwrite certain well known control characters with shorter versions.
set json_escape_map([format %c 8]) \\b; # backspace
set json_escape_map([format %c 9]) \\t; # tab
set json_escape_map([format %c 10]) \\n; # lf
set json_escape_map([format %c 12]) \\f; # ff
set json_escape_map([format %c 13]) \\r; # cr
# Other special sequences
set json_escape_map(\") {\"}
set json_escape_map(\\) {\\}
set json_escape_map(/)  {\/}

#
# Escape a string for inclusion in JSON output.
#
proc escape_json_string { in } {
  return [string map $::json_escape_map $in]
}


######
# Inventory code.
######

#
# Get details and add to the cache.
#
proc add_to_cache { tvdiarydb directory filename } {
  try {
    set filepath "$directory/$filename"
    if { [file extension $filename] eq ".ts" } {
      set ts [ts fetch $filepath]
      set channel_name [$ts get channel_name]
      set title [$ts get title]
      set synopsis [$ts get synopsis]
      set event_start [$ts get start]
      set event_end [$ts get end]
      set schedstart [$ts get schedstart]
      set scheddur [duration_seconds_to_minutes [$ts get scheddur]]
    } else {
      set channel_name ""
      set title $filename
      set synopsis ""
      set event_start [file mtime $filepath]
      set event_end $event_start
      set schedstart $event_start
      set scheddur 0
    }
    # Use [file] for consistency with checking.
    set size [file size $filepath]

    set channel_id [get_channel_id $tvdiarydb $channel_name]
    set title_id [get_title_id $tvdiarydb $title]
    set synopsis_id [get_synopsis_id $tvdiarydb $synopsis]

    $tvdiarydb query "
      INSERT INTO inventory (flag, directory, filename, size, channel_id, title_id, synopsis_id, event_start, event_end, scheduled_start, scheduled_duration)
      VALUES (%s, '%s', '%s', '%s', %s, %s, %s, %s, %s, %s, %s);" 1 $directory $filename $size $channel_id $title_id $synopsis_id $event_start $event_end $schedstart $scheddur
    set act_id [$tvdiarydb lastid]
#    puts "//[clock seconds]: Added to inventory: $act_id, 1, $directory, $filename, $size, $channel_id, $title_id, $synopsis_id, $schedstart, $scheddur."
  } on error { msg } {
    puts "//[clock seconds]: Error accessing information for $directory/$filename - $msg."
  }
}

#
# Check whether there's an entry for this file.
# Returns the inventory_id.
#
proc check_entry { tvdiarydb directory filename size } {
  set _count [$tvdiarydb query "SELECT inventory_id FROM inventory WHERE directory = '%s' AND filename = '%s' AND size = '%s' LIMIT 1" $directory $filename $size]
  if { [llength $_count] > 0 } {
    return [lindex [lindex $_count 0] 1]
  }
#  puts "Found no match for $directory $filename $size"
  return -1
}

#
# Update the cache recursively, starting at this directory.
# Returns 1 if any modifications were made, otherwise 0.
#
proc update_inventory_dir { tvdiarydb directory dustbin } {
#  puts "//[clock seconds]: update_inventory_dir $tvdiarydb $directory $dustbin"
  set modified 0
  set files [glob -nocomplain -directory $directory *]
  foreach filename $files {
    set filepath "$directory/$filename"
    set extension [file extension $filename]
#    puts "//[clock seconds]: Checking file $filepath with extension \"$extension\""
    if { [file isfile $filepath] && ($extension eq ".ts" || $extension in $::MEDIA_FILE_EXTENSIONS) } {
      set id [check_entry $tvdiarydb $directory $filename [file size $filepath]]
      if { $id != -1} {
        $tvdiarydb query "UPDATE inventory SET flag = 1 WHERE inventory_id = %s" $id
        # Found existing entry, so not modified.
#        puts "//[clock seconds]: Set inventory flag for: $id"
      } else {
        set modified 1
        add_to_cache $tvdiarydb $directory $filename
      }
    } elseif { [file isdirectory $filepath] } {
        if {$filepath ne $dustbin} {
          if { [update_inventory_dir $tvdiarydb $filepath $dustbin] } {
            set modified 1
          }
        }
    } else {
      #puts "//[clock seconds]: Ignoring file $filepath"
    }
  }
  return $modified
}

#
# Update the cache.
#
proc update_inventory { tvdiarydb directory dustbin} {
#  puts "//[clock seconds]: update_inventory started."
  set inventory_enabled [get_setting $tvdiarydb "inventory_enabled"]
  if { $inventory_enabled != 1 } {
    return
  }

  set modified 0

  # Check for recent update
  set last_update [get_setting $tvdiarydb "inventory_update"]
  if {$last_update eq "" || ([clock seconds] - $last_update) > 60} {
    # Clear the flags before scanning the disk.
    $tvdiarydb query "UPDATE inventory SET flag = 0;"
    set changes [$tvdiarydb changes]
#    puts "//[clock seconds]: Cleared $changes inventory flags."
  
    # Recursive directory search, setting the flag if present, or adding rows if not present.
    if { [update_inventory_dir $tvdiarydb $directory $dustbin] } {
      set modified 1
    }

    # Purge obsolete cache entries.
    $tvdiarydb query "DELETE FROM inventory WHERE flag = 0;"
    set changes [$tvdiarydb changes]
    if { $changes > 0 } {
      set modified 1
    }
#    puts "//[clock seconds]: Deleted $changes obsolete inventory entries."
    set_setting $tvdiarydb "inventory_update" [clock seconds]
    if { $modified } {
      set_setting $tvdiarydb "inventory_modified" [clock seconds]
    }
  }
#  puts "//[clock seconds]: update_inventory finished."
}


######
# Settings code.
######

proc get_setting { tvdiarydb name { def 0 } } {
  set res [$tvdiarydb query "SELECT value FROM settings WHERE name = '$name'"]
  if {$res ne ""} {
    return [lindex [lindex $res end] end]
  }
  return $def
}

proc set_setting { tvdiarydb name value } {
  $tvdiarydb query "REPLACE INTO settings (name, value) VALUES ('$name', '%s')" $value
}


######
# Normalized strings code.
######

#
# Get the ID of an existing channel_name, or create a new ID.
#
proc get_channel_id { tvdiarydb name } {
  set res [$tvdiarydb query "SELECT channel_id FROM channels WHERE channel_name = '%s'" $name]
  if {$res ne ""} {
    return [lindex [lindex $res end] end]
  }
  $tvdiarydb query "INSERT INTO channels (channel_name) VALUES ('%s')" $name
  return [$tvdiarydb lastid]
}

#
# Get the ID of an existing title, or create a new ID.
#
proc get_title_id { tvdiarydb title } {
  set res [$tvdiarydb query "SELECT title_id FROM titles WHERE title = '%s'" $title]
  if {$res ne ""} {
    return [lindex [lindex $res end] end]
  }
  $tvdiarydb query "INSERT INTO titles (title) VALUES ('%s')" $title
  return [$tvdiarydb lastid]
}

#
# Get the ID of an existing synopsis, or create a new ID.
#
proc get_synopsis_id { tvdiarydb synopsis } {
  set res [$tvdiarydb query "SELECT synopsis_id FROM synopses WHERE synopsis = '%s'" $synopsis]
  if {$res ne ""} {
    return [lindex [lindex $res end] end]
  }
  $tvdiarydb query "INSERT INTO synopses (synopsis) VALUES ('%s')" $synopsis
  return [$tvdiarydb lastid]
}


proc purge_orphaned_programs { tvdiarydb } {
  $tvdiarydb query "
    DELETE FROM programs
    WHERE NOT EXISTS
      (SELECT activity_id
       FROM   activities
       WHERE  activities.program_id = programs.program_id)"
  return [$tvdiarydb changes]
}

proc purge_orphaned_channels { tvdiarydb } {
  $tvdiarydb query "
    DELETE FROM channels
    WHERE NOT EXISTS
      (SELECT channel_id
       FROM   programs
       WHERE  programs.channel_id = channels.channel_id)
      AND NOT EXISTS
      (SELECT channel_id
       FROM   inventory
       WHERE  inventory.channel_id = channels.channel_id)
      AND NOT EXISTS
      (SELECT channel_id
       FROM   program_facts
       WHERE  program_facts.channel_id = channels.channel_id)"
  return [$tvdiarydb changes]
}

proc purge_orphaned_titles { tvdiarydb } {
  $tvdiarydb query "
    DELETE FROM titles
    WHERE NOT EXISTS
      (SELECT title_id
       FROM   programs
       WHERE  programs.title_id = titles.title_id)
      AND NOT EXISTS
      (SELECT title_id
       FROM   inventory
       WHERE  inventory.title_id = titles.title_id)
      AND NOT EXISTS
      (SELECT title_id
       FROM   program_facts
       WHERE  program_facts.title_id = titles.title_id)"
  return [$tvdiarydb changes]
}

proc purge_orphaned_synopses { tvdiarydb } {
  $tvdiarydb query "
    DELETE FROM synopses
    WHERE NOT EXISTS
      (SELECT synopsis_id
       FROM   programs
       WHERE  programs.synopsis_id = synopses.synopsis_id)
      AND NOT EXISTS
      (SELECT synopsis_id
       FROM   inventory
       WHERE  inventory.synopsis_id = synopses.synopsis_id)"
  return [$tvdiarydb changes]
}

#
# Test whether the named table exists.
# Returns 1 if it exists, else 0.
#
proc table_exists { tvdiarydb name } {
  set res [$tvdiarydb query "SELECT COUNT(*) FROM sqlite_master WHERE type = 'table' AND name = '$name'"]
  if {$res ne ""} {
    return [lindex [lindex $res end] end]
  }
  return 0
}


##########
# Build list of scheduled events.
##########

#
# Split the aul binary data into a list of {service_id start end event_id} lists.
#
proc aul { aulEventToRecordInfo } {
  if {![exists -proc binary]} { package require binary }
  set aul {}
  for {set i 0} {$i < [string length $aulEventToRecordInfo]} {incr i 16} {
    binary scan [string range $aulEventToRecordInfo $i $($i + 15)] \
        iiii service start end event_id
    catch {lappend aul [list $service $start $end $event_id]}
  }
  return $aul
}

#
# Build a list of dictionary rows for future events.
# The tvdiary DB must have epg, rsv & channels attached.
#
proc build_future_events_list { tvdiarydb chk_repeats { min_time 0 } { max_time 9999999999 } } {
  set future_events {}

  # Optional checking for repeats - both matching title & synopsis and by CRID.
  if { $chk_repeats } {
    set repeats_clause {
      ,
      (SELECT COUNT(*) FROM programs WHERE programs.crid = e.event_crid AND LENGTH(programs.crid) > 0) as repeat_crid_count,
      (SELECT program_id
        FROM programs, titles, synopses
        WHERE programs.title_id = titles.title_id
          AND programs.synopsis_id = synopses.synopsis_id
          AND titles.title = e.name
          AND synopses.synopsis = e.text
          AND EXISTS (SELECT activity_id FROM activities WHERE activities.program_id = programs.program_id AND (activities.type = 'P' OR activities.type = 'L') AND activities.end != 0 ) LIMIT 1) AS repeat_program_id
    }
    set aul_repeats_clause {
      ,
      (SELECT COUNT(*) FROM programs WHERE programs.crid = e.event_crid AND LENGTH(programs.crid) > 0) as repeat_crid_count,
      (SELECT program_id
        FROM programs, titles, synopses
        WHERE programs.title_id = titles.title_id
          AND programs.synopsis_id = synopses.synopsis_id
          AND titles.title = e.name
          AND synopses.synopsis = e.text
          AND EXISTS (SELECT activity_id FROM activities WHERE activities.program_id = programs.program_id AND (activities.type = 'P' OR activities.type = 'L') AND activities.end != 0 ) LIMIT 1) AS repeat_program_id
    }
  } else {
    set repeats_clause {}
    set aul_repeats_clause {}
  }

  # Get the details of the scheduled events.
  # Always get the rsv and channel.
  # Outer join epg in case it's in a state of flux and not found.
  # Filter r.ersvtype: 3 == recording vs. a reminder, wake-up, sleep or auto-update event.
  # Filter r.ucRecKind: 1 == one-off, 2 == split, 4 == series.
  set records [$tvdiarydb query "
    SELECT r.nsttime, r.nduration, r.aulEventToRecordInfo, r.ersvtype, r.ucRecKind, r.hsvc,
      SUBSTR(c.szSvcName, 2) AS channel_name,
      e.name AS title, e.text AS synopsis, e.start, e.end, e.duration, e.event_crid, e.service_id
      $repeats_clause
    FROM rsv.TBL_RESERVATION r, channel.TBL_SVC c
    LEFT OUTER JOIN epg e
      ON e.service_id = c.usSvcId
      AND e.start = r.nsttime
    WHERE r.ersvtype = 3 AND (r.ucRecKind = 1 OR r.ucRecKind = 2 OR r.ucRecKind = 4)
      AND r.hsvc = c.hSvc
    ORDER BY r.nsttime, c.szSvcName"]
  # (Clause "(r.nsttime + r.nduration) >= %s AND r.nsttime < %s" $min_time $max_time removed as subsequent events still needed. Get all and filter afterwards.

  foreach record $records {
    if { $record(nsttime) + $record(nduration) >= $min_time && $record(nsttime) < $max_time } {
      # Use values from the rsv rather than epg where possible.
      set vals [dict create "channel_name" $record(channel_name) "scheduled_start" $record(nsttime) "scheduled_end" [expr $record(nsttime) + $record(nduration)] "scheduled_duration" $record(nduration) "ucRecKind" $record(ucRecKind)]
      # Check epg.start to see if it's found in the EPG.
      if { $record(start) == {} } {
        dict set vals "title" "Not in EPG"
        dict set vals "synopsis" "No information available"
        dict set vals "event_crid" {}
        dict set vals "repeat_program_id" {}
        dict set vals "repeat_crid_count" 0
      } else {
        dict set vals "title" $record(title)
        dict set vals "synopsis" $record(synopsis)
        dict set vals "event_crid" $record(event_crid)
        if { $chk_repeats } {
          dict set vals "repeat_program_id" $record(repeat_program_id)
          dict set vals "repeat_crid_count" $record(repeat_crid_count)
        } else {
          dict set vals "repeat_program_id" {}
          dict set vals "repeat_crid_count" 0
        }
        # Some assertions:
        if { $record(nsttime) != $record(start) } {
          throw error "***** RSV and EPG start discrepency. $record(nsttime) != $record(start)"
        }
        if { $record(nduration) != $record(duration) } {
          #throw error "***** RSV and EPG duration discrepency. $record(nduration) != $record(duration)"
        }
        if { [expr $record(nsttime) + $record(nduration)] != $record(end) } {
          #throw error "***** RSV and EPG end discrepency. [expr $record(nsttime) + $record(nduration)] != $record(end)"
        }
      }
      set key "$record(nsttime):$record(channel_name)"
      dict set future_events $key $vals
    }

    # Check for subsequent events.
    set elist [aul $record(aulEventToRecordInfo)]
    foreach e $elist {
      lassign $e hservice start end event_id
      # Usually the first entry matches the containing row, so skip.
      # And if the subsequent events are out of range, skip.
      if { !($hservice == $record(hsvc) && $start == $record(nsttime)) && $end > $min_time && $start < $max_time } {
        # Otherwise search for details.
        # Again, outer join EPG so values may be null.
        set aulrecords [$tvdiarydb query "
          SELECT SUBSTR(c.szSvcName, 2) AS channel_name,
            e.name AS title, e.text AS synopsis, e.start, e.end, e.duration, e.event_crid
            $aul_repeats_clause
          FROM channel.TBL_SVC c
          LEFT OUTER JOIN epg e
           ON e.service_id = c.usSvcId
           AND e.start = %s
          WHERE c.hSvc = %s
          ORDER BY e.start, c.szSvcName
          LIMIT 1" $start $hservice]
        foreach aulrecord $aulrecords {
          # Use values from the aul rather than epg where possible. ucRecKind from the main record.
          set vals [dict create "channel_name" $aulrecord(channel_name) "scheduled_start" $start "scheduled_end" $end "scheduled_duration" [expr $end - $start] "ucRecKind" $record(ucRecKind)]
          # Check epg.start to see if it's found in the EPG.
          if { $aulrecord(start) == {} } {
            dict set vals "title" "Not in EPG"
            dict set vals "synopsis" "No information available"
            dict set vals "event_crid" {}
            dict set vals "repeat_program_id" {}
            dict set vals "repeat_crid_count" 0
          } else {
            dict set vals "title" $aulrecord(title)
            dict set vals "synopsis" $aulrecord(synopsis)
            dict set vals "event_crid" $aulrecord(event_crid)
            if { $chk_repeats } {
              dict set vals "repeat_program_id" $aulrecord(repeat_program_id)
              dict set vals "repeat_crid_count" $aulrecord(repeat_crid_count)
            } else {
              dict set vals "repeat_program_id" {}
              dict set vals "repeat_crid_count" 0
            }
            # Some assertions:
            if { $start != $aulrecord(start) } {
              #throw error "***** AUL and EPG start discrepency. $start != $aulrecord(start)"
            }
            if { $end != $aulrecord(end) } {
              #throw error "***** AUL and EPG end discrepency. $end != $aulrecord(end)"
            }
            set key "$start:$aulrecord(channel_name)"
            dict set future_events $key $vals
          }
        }
      }

    }
  }
  return $future_events
}

#
# Extract the CRIDs of scheduled recordings as dictionary keys, mapping to their ucRecKind.
# 
proc crid_ucRecKind_from_future_events { future_events } {
  set crids {}
  set keys [dict keys $future_events]
  foreach key $keys {
    set vals [dict get $future_events $key]
    if { $vals(event_crid) != {} } {
      dict set crids $vals(event_crid) $vals(ucRecKind)
    }
  }
  return $crids
}

#
# Convert time of day to time of the start of that TV day.
# NB The TZ offset in Tcl is opposite sign to JavaScript.
#
proc get_tv_day_start { t day_start } {
  set z [clock format $t -format "%z"]
  set tz_offset [expr int($z / 100) * 3600 + int($z % 100) * 60]
  set day_t [expr int( ($t + $tz_offset - $day_start) / 86400 ) * 86400 - $tz_offset + $day_start]
  return $day_t
}

#
# Round a duration from seconds to minutes.
#
proc duration_seconds_to_minutes { d } {
  return [expr $d / 60]
}

#
# Round a duration from seconds to minutes.
#
proc duration_seconds_to_minutes_rounding { d } {
  return [expr ($d + 29) / 60]
}

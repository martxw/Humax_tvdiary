#!/mod/bin/jimsh
#
# Render the details of what was recorded, will be recorded, or was watched on a given date.
# Called over CGI to update a page, or as a CLI for hosting on a different server.
# After successfully rendering the data, the value "status" is set to "OK".
# If there is no data, or on error, "status" is set "EMPTY" or "<error message>".
# Clients should therefore check "status" first. If there is a serious server error part way
# through rendering, the JSON may be malformed and not parsable.
#
# CGI usage: /tvdiary/day_json.jim?start=<time_start>&current_time=<browser's current time>&type=<type>
# CLI usage: day_json.jim <time_start> <type> [<icons_path> <icons_url>]
#   time_start = seconds since 1 Jan 1970 epoch, UTC.
#   current_time = browser's current seconds since 1 Jan 1970 epoch, UTC.
#   type = R or W for Recorded or Watched (including both Played and Live watched).
#   icons_path = disk path to the TV channel icons.
#   icons_url = URL path to the TV channel icons.
#
# Author: Martin Wink, 2013-2014.
#

package require cgi
source /mod/webif/lib/setup
source /mod/webif/html/tvdiary/tvdiary_utils.jim
source /mod/webif/html/tvdiary/tvdiary_stub.jim

# --------------------------------------------------------------
# Declare globals
# --------------------------------------------------------------
set current_time [clock seconds]
set time_fmt "%H:%M"
set date_time_fmt "%a %d %b %Y $time_fmt"

set channel_icons_path "/mod/webif/html/img/channels/out"
set channel_icons_url "/img/channels/out"

# --------------------------------------------------------------
# CGI or command line parameters
# --------------------------------------------------------------
set runmode cli
if { [dict exists $env "REQUEST_METHOD"] } { set runmode cgi }

case $runmode {
  cgi {
    cgi_input
    set time_start [cgi_get start]
    # use the browser's time - helps when the clocks aren't synced.
    set current_time [cgi_get current_time]
    set type [cgi_get type]
    httpheader "application/json"
  }
  cli {
    if { $argc != 2 && $argc != 4 } {
      puts "Usage: $argv0 <time_start> <type> \[<icons_path> <icons_url>\]"
      puts " time_start = seconds since 1 Jan 1970 epoch"
      puts " type = R or W for Recorded or Watched (including both Played and Live watched)"
      puts " icons_path = disk path to the TV channel icons"
      puts " icons_url = URL path to the TV channel icons"
      puts ""
      puts "Eg: $argv0 $current_time R"
      puts "Eg: $argv0 $current_time R $channel_icons_path $channel_icons_url"
      exit -1
    }
    set time_start [lindex $argv 0]
    set type [lindex $argv 1]
    if { $argc == 4 } {
      set channel_icons_path [lindex $argv 2]
      set channel_icons_url [lindex $argv 3]
    }
  }
}
set time_end [expr $time_start + 86400]

set include_future_events 1

# In case of error - break glass!
#puts "/* "
#foreach key [lsort [dict keys $env]] {puts "env($key)=$env($key)"}
#puts "auto_path=$auto_path"
#puts "*/"

# --------------------------------------------------------------
# Declare procedures
# --------------------------------------------------------------

#
# Common output of a table row.
#
proc output_row { type active watched repeat_program_id repeat_crid_count event_crid available event_start event_end event_duration scheduled_start scheduled_end scheduled_duration channel_name title synopsis } {

  if { $repeat_program_id == {} } {
    set repeat_program_id -1
  }
  puts "  {"
  puts "   \"type\": \"$type\","
  puts "   \"active\": $active,"
  puts "   \"watched\": $watched,"
  puts "   \"repeat_program_id\": $repeat_program_id,"
  puts "   \"repeat_crid_count\": $repeat_crid_count,"
  puts "   \"event_crid\": \"$event_crid\","
  puts "   \"available\": $available,"
  puts "   \"event_start\": $event_start,"
  puts "   \"event_end\": $event_end,"
  puts "   \"event_duration\": $event_duration,"
  puts "   \"scheduled_start\": $scheduled_start,"
  puts "   \"scheduled_end\": $scheduled_end,"
  puts "   \"scheduled_duration\": $scheduled_duration,"

  puts "   \"channel_name\": \"[escape_json_string $channel_name]\","
  set channel_icon_path "$::channel_icons_url/Unknown.png"
  if { $channel_name != "" } {
    if { [file exists "$::channel_icons_path/$channel_name.png"] } {
      set channel_icon_path "$::channel_icons_url/[cgi_quote_url $channel_name].png"
    } else {
      set channel_icon_path "$::channel_icons_url/Unknown.png"
    }
  }
  puts "   \"channel_icon_path\": \"$channel_icon_path\","

  puts "   \"title\": \"[escape_json_string $title]\","
  puts "   \"synopsis\": \"[escape_json_string $synopsis]\""
  puts -nonewline "  }"
}

#
# Output the table row for one record of past details.
#
proc output_past_record { record } {
  # Default in case of old W records.
  set typeclass "play"
  case $record(type) {
    R {
      set typeclass "record"
    }
    P {
      set typeclass "play"
    }
    L {
      set typeclass "live"
    }
  }
  if { $record(unfinished) } {
    set isactive "true"
  } else {
    set isactive "false"
  }
  if { $record(watched) } {
    set watched "true"
  } else {
    set watched "false"
  }
  if { $record(available) } {
    set available "true"
  } else {
    set available "false"
  }

  # All events have their actual duration.
  set calculated_duration [duration_seconds_to_minutes_rounding [expr $record(end) - $record(start)]]
  set scheduled_end [expr $record(scheduled_start) + ($record(scheduled_duration) * 60)]

  output_row $typeclass $isactive $watched $record(repeat_program_id) $record(repeat_crid_count) $record(event_crid) $available $record(start) $record(end) $calculated_duration $record(scheduled_start) $scheduled_end $record(scheduled_duration) $record(channel_name) $record(title) $record(synopsis)
}

#
# Output the table row for a future event.
#
proc output_future_record { record } {
  set duration [duration_seconds_to_minutes $record(scheduled_duration)]
  if { $record(ucRecKind) == 1 } {
    set type "future"
  } else {
    set type "future_series"
  }
  output_row $type "false" "false" $record(repeat_program_id) $record(repeat_crid_count) $record(event_crid) "false" $record(scheduled_start) $record(scheduled_end) $duration $record(scheduled_start) $record(scheduled_end) $duration $record(channel_name) $record(title) $record(synopsis)
}

#
# Main
#
proc main {} {
  # begin_debug
  #  puts "/* Parameters:
  #  time_start=$::time_start=[clock format $::time_start]
  #  time_end=$::time_end=[clock format $::time_end]
  #  type=$::type */"
  # end_debug

  #
  # If looking at playback and it's for a future date, skip the DB altogether.
  #
  if { $::type != "R" && $::time_start > $::current_time } {
    #
    # We know there are no playbacks yet in the future.
    #
    puts "{"
    puts " \"current_time\": $::current_time,"
    puts " \"time_start\": $::time_start,"
    puts " \"time_end\": $::time_end,"
    puts " \"events\": \[\],"
    puts " \"status\": \"OK\""
    puts "}"

  } else {

    #
    # Check we have a database, and open it, else HTTP error.
    #
    if { ![file exists $::DB_FILEPATH] } {
      # Ajax detects the error if we just exit.
      throw error "The tvdiary.db database is missing."
    }

    #
    # Get a lock for the database
    #
    if {![acquire_lock tvdiary_db]} {
      throw error "Timed out acquiring exclusive access to the database. Try again later."
    }

    set tvdiarydb [sqlite3.open $::DB_FILEPATH]

    #
    # Update the cached inventory.
    #
    update_inventory $tvdiarydb [system mediaroot] [system dustbin]
    
    #
    # Query the set of records for the specified type and time range.
    #
    if {$::type == "R"} {
      set type_clause "a1.type='R'"
    } else {
      set type_clause "a1.type!='R'"
    }
    # Subquery checks whether the program has been watched - playback or live - long enough to have an end time.
    set records [$tvdiarydb query "
      SELECT a1.start, a1.type, a1.end, a1.unfinished,
        channels.channel_name, titles.title, synopses.synopsis,
        p1.start AS scheduled_start, p1.duration AS scheduled_duration, p1.crid as event_crid,
        (SELECT COUNT(*) FROM activities a2 WHERE a2.program_id = p1.program_id AND (a2.type = 'P' OR a2.type = 'L') AND a2.end != 0) AS watched,
        (SELECT p2.program_id FROM programs p2 WHERE p2.title_id = p1.title_id AND p2.synopsis_id = p1.synopsis_id AND p1.program_id != p2.program_id) AS repeat_program_id,
        (SELECT COUNT(*) FROM programs p3 WHERE p1.crid = p3.crid AND p1.program_id != p3.program_id AND LENGTH(p1.crid) > 0) as repeat_crid_count,
        (SELECT COUNT(*) FROM inventory WHERE inventory.channel_id = p1.channel_id AND inventory.scheduled_start = p1.start) AS available
      FROM activities a1, programs p1, channels, titles, synopses
      WHERE $type_clause AND a1.end > %s AND a1.start < %s AND a1.program_id = p1.program_id AND channels.channel_id = p1.channel_id AND titles.title_id = p1.title_id AND synopses.synopsis_id = p1.synopsis_id
      ORDER BY a1.start" $::time_start $::time_end]

    #
    # Determine if future recording events need to be included.
    #
    set future_events {}
    if { $::include_future_events && $::type == "R" && $::time_end > $::current_time } {
      # Get the details of the scheduled events.
      $tvdiarydb query {attach database '%s' as channel} $::CHANNEL_DB_PATH
      $tvdiarydb query {attach database '%s' as epg} $::EPG_DB_PATH
      $tvdiarydb query {attach database '%s' as rsv} $::RSV_DB_PATH
      
      set future_events [build_future_events_list $tvdiarydb 1 [expr $::time_start > $::current_time ? $::time_start : $::current_time] $::time_end]

      # I considered processing the pending scheduled events here to add or remove from the map,
      # but pending events only have the first occurance of a series. So I can't
      # add anything but the first, and I can't remove anything but the first.
      # So, took the policy decision that the diary predicts what will be recorded
      # if you don't restart the machine.

      # THIS WILL CHANGE - By splitting the szEventToRecord value to get the event CRID, and using
      # the usevtid, I should be able to query the EPG to get the details. Possible use the same
      # mechanism for the existing scheduled events too, for consistency and hopefully speed it up.

    }

    # Finished with the DB.
    $tvdiarydb close

    #
    # Closed the DB so release the lock.
    #
    release_lock tvdiary_db

    #
    # Corner case: I initially suppressed future events immediately after their start time, but
    # this results in events disappearing for a couple of minutes until the show has actually
    # started and more than a minute has been recorded.
    # So instead, suppress by spotting & removing duplicates.
    #
    # NB: It's arguable that future events that should have started but not yet finished
    # should be included, but marked as active, and that the filtering be done in JavaScript.
    # That way the minutes remaining to be recorded can be included in the total counts.
    #
    if { [llength $records] > 0 && [llength $future_events] > 0 } {
      foreach record $records {
        set key "$record(scheduled_start):$record(channel_name)"
        if { [dict exists $future_events $key]  } {
          dict unset future_events $key
        }
      }
    }

    puts "{"
    puts " \"current_time\": $::current_time,"
    puts " \"time_start\": $::time_start,"
    puts " \"time_end\": $::time_end,"

    puts -nonewline " \"events\": \["
    set comma 0
    foreach record $records {
      if { $comma } {
        puts ","
      } else {
        puts ""
        set comma 1
      }
      output_past_record $record
    }

    set keys [lsort [dict keys $future_events]]
    foreach key $keys {
      set vals [dict get $future_events $key]
      if { $comma } {
        puts ","
      } else {
        puts ""
        set comma 1
      }
      output_future_record $vals
    }
    puts ""
    puts " \],"

    puts " \"status\": \"OK\""
    puts "}"
  }
}

if { $runmode == "cgi" } {
  try {
    main
  } on error { msg } {
    puts "{ \"status\": \"[escape_json_string $msg]\" }"
  }
} else {
  main
}

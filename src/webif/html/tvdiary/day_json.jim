#!/mod/bin/jimsh
#
# Render the details of what was recorded, will be recorded, or was watched on a given date.
# Called over CGI to update a page, or as a CLI for hosting on a different server.
# After successfully rendering the data, the value "status" is set to "OK".
# If there is no data, or on error, "status" is set "EMPTY" or "<error message>".
# Clients should therefore check "status" first. If there is a serious server error part way
# through rendering, the JSON may be malformed and not parsable.
#
# CGI usage: /tvdiary/day_json.jim?start=<time_start>&current_time=<browser's current time>&type=<type>
# CLI usage: day_json.jim <time_start> <type> [<icons_path> <icons_url>]
#   time_start = seconds since 1 Jan 1970 epoch.
#   type = R or W for Recorded or Watched (including both Played and Live watched).
#   icons_path = disk path to the TV channel icons.
#   icons_url = URL path to the TV channel icons.
#
# Author: Martin Wink, 2013-2014.
#

package require cgi
source /mod/webif/lib/setup
require rsv.class epg.class
source tvdiary_db.jim

if { ![exists -proc sqlite3.open] } { package require sqlite3 }

# --------------------------------------------------------------
# Declare globals
# --------------------------------------------------------------
set current_time [clock seconds]
set time_fmt "%H:%M"
set date_time_fmt "%a %d %b %Y $time_fmt"

set DB_FILEPATH "/mod/etc/tvdiary.db"

set channel_icons_path "/mod/webif/html/img/channels/out"
set channel_icons_url "/img/channels/out"

# Accumulte a map from "<time>:<channel-name>" to {service_id start_time end_time}.
set future_events {}

# --------------------------------------------------------------
# CGI or command line parameters
# --------------------------------------------------------------
set runmode cli
if { [dict exists $env "REQUEST_METHOD"] } { set runmode cgi }

case $runmode {
  cgi {
    cgi_input
    set time_start [cgi_get start]
    # use the browser's time - helps when the clocks aren't synced.
    set current_time [cgi_get current_time]
    set type [cgi_get type]
    httpheader "application/json"
  }
  cli {
    if { $argc != 2 && $argc != 4 } {
      puts "Usage: $argv0 <time_start> <type> \[<icons_path> <icons_url>\]"
      puts " time_start = seconds since 1 Jan 1970 epoch"
      puts " type = R or W for Recorded or Watched (including both Played and Live watched)"
      puts " icons_path = disk path to the TV channel icons"
      puts " icons_url = URL path to the TV channel icons"
      puts ""
      puts "Eg: $argv0 $current_time R"
      puts "Eg: $argv0 $current_time R $channel_icons_path $channel_icons_url"
      exit -1
    }
    set time_start [lindex $argv 0]
    set type [lindex $argv 1]
    if { $argc == 4 } {
      set channel_icons_path [lindex $argv 2]
      set channel_icons_url [lindex $argv 3]
    }
  }
}
set time_end [expr $time_start + 86400]

# TODO: Possibly add CGI and cli parameters to exclude the future events if not needed.
set include_future_events 1

# In case of error - break glass!
#puts "/* "
#foreach key [lsort [dict keys $env]] {puts "env($key)=$env($key)"}
#puts "auto_path=$auto_path"
#puts "*/"

# --------------------------------------------------------------
# Declare procedures
# --------------------------------------------------------------

#
# Initialize a map from control characters to JSON escaped characters. 
# Initially all non-null control characters to \u00xx sequences.
for {set i 1} {$i < 32} {incr i} {
  set json_escape_map([format %c $i]) \\u[format %04x $i]
}
# Then overwrite certain well known control characters with shorter versions.
set json_escape_map([format %c 8]) \\b; # backspace
set json_escape_map([format %c 9]) \\t; # tab
set json_escape_map([format %c 10]) \\n; # lf
set json_escape_map([format %c 12]) \\f; # ff
set json_escape_map([format %c 13]) \\r; # cr
# Other special sequences
set json_escape_map(\") {\"}
set json_escape_map(\\) {\\}
set json_escape_map(/)  {\/}

#
# Escape a string for inclusion in JSON output.
#
proc escape_json_string { in } {
  return [string map $::json_escape_map $in]
}

#
# Common output of a table row.
#
proc output_row { type active watched repeats repeat_id event_start event_end event_duration scheduled_start scheduled_end scheduled_duration channel_name title synopsis } {

  if { $repeats == 0 } {
    set repeat_id -1
  }
  puts "  {"
  puts "   \"type\": \"$type\","
  puts "   \"active\": $active,"
  puts "   \"watched\": $watched,"
  puts "   \"repeats\": $repeats,"
  puts "   \"repeat_id\": $repeat_id,"
  puts "   \"event_start\": $event_start,"
  puts "   \"event_end\": $event_end,"
  puts "   \"event_duration\": $event_duration,"
  puts "   \"scheduled_start\": $scheduled_start,"
  puts "   \"scheduled_end\": $scheduled_end,"
  puts "   \"scheduled_duration\": $scheduled_duration,"

  puts "   \"channel_name\": \"[escape_json_string $channel_name]\","
  set channel_icon_path "$::channel_icons_url/Unknown.png"
  if { $channel_name != "" } {
    if { [file exists "$::channel_icons_path/$channel_name.png"] } {
      set channel_icon_path "$::channel_icons_url/[cgi_quote_url $channel_name].png"
    } else {
      set channel_icon_path "$::channel_icons_url/Unknown.png"
    }
  }
  puts "   \"channel_icon_path\": \"$channel_icon_path\","

  puts "   \"title\": \"[escape_json_string $title]\","
  puts "   \"synopsis\": \"[escape_json_string $synopsis]\""
  puts -nonewline "  }"
}

#
# Output the table row for one record of past details.
#
proc output_past_record { record } {
  # Default in case of old W records.
  set typeclass "play"
  case $record(type) {
    R {
      set typeclass "record"
    }
    P {
      set typeclass "play"
    }
    L {
      set typeclass "live"
    }
  }
  if { $record(unfinished) } {
    set isactive "true"
  } else {
    set isactive "false"
  }
  if { $record(watched) } {
    set watched "true"
  } else {
    set watched "false"
  }

  # All events have their actual duration.
  set calculated_duration [expr ($record(end) - $record(start) + 30) / 60]
  set scheduled_end [expr $record(scheduled_start) + ($record(scheduled_duration) * 60)]

  output_row $typeclass $isactive $watched $record(repeats) $record(repeat_id) $record(start) $record(end) $calculated_duration $record(scheduled_start) $scheduled_end $record(scheduled_duration) $record(channel_name) $record(title) $record(synopsis)
}

#
# Output the table row for a future event.
#
proc output_future_record { record } {
  output_row "future" "false" "false" $record(repeats) $record(repeat_id) $record(scheduled_start) $record(scheduled_end) $record(scheduled_duration) $record(scheduled_start) $record(scheduled_end) $record(scheduled_duration) $record(channel_name) $record(title) $record(synopsis)
}

#
# Convert from the handle of a service to the service ID.
# (Consider caching results to avoid repeated queries.)
#
proc hsvc_to_svcid { hsvc } {
  if { $hsvc == 0 } { return 0 }
  set _svcid [$::rsvdb query "SELECT usSvcid FROM channel.TBL_SVC WHERE hSvc = $hsvc LIMIT 1"]
  if { [llength $_svcid] != 1 } {
    throw error "Failed to get svcid for hsvc=$hsvc"
  }
  set svcid [lindex [lindex $_svcid 0] 1]
  return $svcid;
}

#
# Filter by time and add a record to ::future_events.
#
proc filter_and_add_to_future_events {tvdiarydb start end service_id channel_name} {
  if { $end >= $::time_start && $end > $::current_time && $start < $::time_end } {

    # Get the EPG entry for the other details displayed.
    # NB: Adding 1 second because the EPG class checks > rather than >= start time.
    # NB2: It is possible that the EPG entry doesn't get found, so be prepared to substitute "No information".
    set epgs [epg dbfetch get -service $service_id -time [expr $start + 1]]
    if { [llength $epgs] == 1 } {
      lassign $epgs epg
      set title [$epg get name]
      set synopsis [$epg get text]
      set channel_name [$epg get channel_name]
    } else {
      set title "Not in EPG"
      set synopsis "No information available"
      # channel_name was passed in.
    }

    set calculated_duration [expr ($end - $start + 30) / 60]

    set records [$tvdiarydb query "
      SELECT COUNT(*) AS repeats, program_id AS repeat_id FROM programs WHERE programs.title = '%s' AND programs.synopsis = '%s'
      AND EXISTS (SELECT activity_id FROM activities WHERE activities.program_id = programs.program_id AND (activities.type = 'P' OR activities.type = 'L') AND activities.end != 0 )
      LIMIT 1
      " $title $synopsis]
    set record [lindex $records 0]
    set repeats $record(repeats)
    set repeat_id $record(repeat_id)

    set vals [dict create "repeats" $repeats "repeat_id" $repeat_id "scheduled_start" $start "scheduled_end" $end "scheduled_duration" $calculated_duration "channel_name" $channel_name "title" $title "synopsis" $synopsis]

    set key "$start:$channel_name"
    dict set ::future_events $key $vals
    return 1
  }
  return 0
}

#
# Filter the events and add future events to the global $::future_events.
#
proc add_future_event { tvdiarydb event } {
  set in 0
  # 3 == recording vs. a reminder, wake-up, sleep or auto-update event.
  if { [$event get ersvtype] == 3 } {
    set ucRecKind [$event get ucRecKind]
    # 1 == one-off, 4 == series.
    if { $ucRecKind == 1 || $ucRecKind == 4 } {

      # We have to check the entry's own time AND the times from its series link list.
      set elist [$event aul]
      foreach e $elist {
        lassign $e hservice start end event_id
        set in [filter_and_add_to_future_events $tvdiarydb $start $end [hsvc_to_svcid $hservice] [$event channel_name]]
      }

      set in [filter_and_add_to_future_events $tvdiarydb [$event get nsttime] [expr [$event get nsttime] + [$event get nduration]] [hsvc_to_svcid [$event get hsvc]] [$event channel_name]]
    }
  }
  return $in
}

#
# Main
#
proc main {} {
  # begin_debug
  #  puts "/* Parameters:
  #  time_start=$::time_start=[clock format $::time_start]
  #  time_end=$::time_end=[clock format $::time_end]
  #  type=$::type */"
  # end_debug

  #
  # Check we have a database, and open it, else HTTP error.
  #
  if { ![file exists $::DB_FILEPATH] } {
    # Ajax detects the error if we just exit.
    throw error "The tvdiary.db database is missing."
  }

  #
  # Get a lock for the database
  #
  if {![acquire_lock tvdiary_db]} {
    throw error "Cannot acquire exclusive lock for tvdiary.tb."
  }

  set tvdiarydb [sqlite3.open $::DB_FILEPATH]

  #
  # Query the set of records for the specified type and time range.
  #
  if {$::type == "R"} {
    set type_clause "a1.type='R'"
  } else {
    set type_clause "a1.type!='R'"
  }
  # Subquery checks whether the program has been watched - playback or live - long enough to have an ent time.
  set records [$tvdiarydb query "
    SELECT a1.start, a1.type, a1.end, a1.unfinished,
    (SELECT COUNT(*) FROM activities a2 WHERE a2.program_id = p1.program_id AND (a2.type = 'P' OR a2.type = 'L') AND a2.end != 0) AS watched,
    (SELECT COUNT(*) FROM programs p2 WHERE p2.title = p1.title AND p2.synopsis = p1.synopsis AND p1.program_id != p2.program_id) AS repeats,
    p1.program_id AS repeat_id, p1.channel_name, p1.title, p1.synopsis, p1.start AS scheduled_start, p1.duration AS scheduled_duration
    FROM activities a1, programs p1
    WHERE $type_clause AND a1.end > %s AND a1.start < %s AND a1.program_id = p1.program_id
    ORDER BY a1.start" $::time_start $::time_end]

  #
  # Determine if future recording events need to be included.
  #
  if { $::include_future_events && $::type == "R" && $::time_end > $::current_time } {
    # Get the details of the scheduled events.
    set events [rsv list]
    foreach event $events {
      add_future_event $tvdiarydb $event
    }

    # I considered processing the pending scheduled events here to add or remove from the map,
    # but pending events only have the first occurance of a series. So I can't
    # add anything but the first, and I can't remove anything but the first.
    # So, took the policy decision that the diary predicts what will be recorded
    # if you don't restart the machine.
    
    # Initially the $::future_events has just 
  }

  # Finished with the DB.
  $tvdiarydb close

  #
  # Closed the DB so release the lock.
  #
  release_lock tvdiary_db

  if { [llength $records] > 0 || [llength $::future_events] > 0 } {
    #
    # Corner case: I initially suppressed future events immediately after their start time, but
    # this results in events disappearing for a couple of minutes until the show has actually
    # started and more than a minute has been recorded.
    # So instead, suppress by spotting & removing duplicates.
    #
    # NB: It's arguable that future events that should have started but not yet finished
    # should be included, but marked as active, and that the filtering be done in JavaScript.
    # That way the minutes remaining to be recorded can be included in the total counts.
    #
    if { [llength $records] > 0 && [llength $::future_events] > 0 } {
      foreach record $records {
        set key "$record(scheduled_start):$record(channel_name)"
        if { [dict exists $::future_events $key]  } {
          dict unset ::future_events $key
        }
      }
    }

    puts "{"
    puts " \"current_time\": $::current_time,"
    puts " \"time_start\": $::time_start,"
    puts " \"time_end\": $::time_end,"

    puts -nonewline " \"events\": \["
    set comma 0
    foreach record $records {
      if { $comma } {
        puts ","
      } else {
        puts ""
        set comma 1
      }
      output_past_record $record
    }

    set keys [lsort [dict keys $::future_events]]
    foreach key $keys {
      set vals [dict get $::future_events $key]
      #lassign $vals service_id start_time end_time
      #lassign [split $key ":"] x channel_name
      if { $comma } {
        puts ","
      } else {
        puts ""
        set comma 1
      }
      #output_future_event $service_id $channel_name $start_time $end_time
      output_future_record $vals
    }
    puts ""
    puts " \],"

    puts " \"status\": \"OK\""
    puts "}"
  } else {
    #
    # For zero length results.
    #
    puts "{ \"status\": \"EMPTY\" }"
  }
}

if { $runmode == "cgi" } {
  try {
    main
  } on error { msg } {
    puts "{ \"status\": \"[escape_json_string $msg]\" }"
  }
} else {
  main
}

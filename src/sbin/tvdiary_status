#!/mod/bin/jimsh
#
# PVR status checker to be run every minute to update the tvdiary database.
# Author: Martin Wink, 2013.
# Based on status.jim by af123.
#

# In case of error - break glass!
#foreach key [lsort [dict keys $env]] {puts "env($key)=$env($key)"}
#puts "auto_path=$auto_path"

source /mod/webif/lib/setup
require ts.class
source /mod/webif/html/tvdiary/tvdiary_utils.jim

# --------------------------------------------------------------
# Declare globals
# --------------------------------------------------------------
set logging 1

set LSOF "/mod/bin/lsof"
set PGREP "/mod/bin/busybox/pgrep"

# Time between checking files, to allow recordings to grow.
set SLEEP_TIME 10

# Threshold for the age of files to detect recording.
set RECORDING_THRESHOLD 10

set include_live_tv 1

#
# The time for this polling period.
#
set current_time [clock seconds]
set log_date_fmt "%d/%m/%Y-%H:%M:%S"
set logging_time [clock format $current_time -format $log_date_fmt]
#if { $::logging } {
#  puts "\n$logging_time: tvdiary_status.jim"
#}

# --------------------------------------------------------------
# Declare procedures
# --------------------------------------------------------------

#
# Load the IDs of previously unfinished activities.
#
proc load_unfinished_activities { tvdiarydb } {
  set unfinished_activities {}

  set res [$tvdiarydb query "SELECT activity_id FROM activities WHERE unfinished=1"]
  foreach rec $res {
    lappend unfinished_activities $rec(activity_id)
  }
  return $unfinished_activities;
}

#
# Update the flags on activities that are now finished.
# Any activities that haven't got end times (ie represent less than a minute) are deleted.
#
proc update_finished_activities { tvdiarydb &finished_activities } {
  foreach activity_id $finished_activities {
    $tvdiarydb query "UPDATE activities SET unfinished=0 WHERE activity_id=%s" $activity_id
    if { $::logging } {
      puts "$::logging_time: Finished activity $activity_id, [get_activity_program_details $tvdiarydb $activity_id]"
    }
  }

  if { $::logging } {
    set res [$tvdiarydb query "SELECT activity_id FROM activities WHERE unfinished = 0 AND end = 0"]
    foreach rec $res {
      puts "$::logging_time: Deleted zero length activity $rec(activity_id), [get_activity_program_details $tvdiarydb $rec(activity_id)]"
    }
  }
  $tvdiarydb query "DELETE FROM activities WHERE unfinished = 0 AND end = 0"

  $tvdiarydb query "
    DELETE FROM programs
    WHERE  NOT EXISTS
      (SELECT activity_id
       FROM   activities
       WHERE  activities.program_id = programs.program_id)"
}

#
# For debug logging - find the program that goes with an activity.
#
proc get_activity_program_details { tvdiarydb activity_id } {
  set _rec [$tvdiarydb query "
    SELECT activities.type, activities.start, activities.end, activities.unfinished, channels.channel_name, titles.title, programs.start AS scheduled_start, programs.duration AS scheduled_duration
    FROM activities, programs, channels, titles
    WHERE activities.program_id = programs.program_id AND channels.channel_id = programs.channel_id AND titles.title_id = programs.title_id AND activities.activity_id = %s" $activity_id]
  set rec [lindex $_rec 0]
  return "'$rec(type)', $rec(channel_name), '$rec(title)', [clock format $rec(start) -format $::log_date_fmt] - [clock format $rec(end) -format $::log_date_fmt], [clock format $rec(scheduled_start) -format $::log_date_fmt], $rec(scheduled_duration)";
}

#
# Add details for a program being watched live, played or recorded.
#
proc log_program_activity { tvdiarydb &finished_activities activity_type log_time channel_name title synopsis start_time duration crid } {

  set channel_id [get_channel_id $tvdiarydb $channel_name]
  set title_id [get_title_id $tvdiarydb $title]
  set synopsis_id [get_synopsis_id $tvdiarydb $synopsis]

  # Check for an existing entry for this program, searching by channel_name and start_time, or by title if there's no channel.
  if { $channel_name ne "" } {
    set _prog_id [$tvdiarydb query "
      SELECT program_id
      FROM programs
      WHERE channel_id = %s AND start = %s
      LIMIT 1
      " $channel_id $start_time]
  } else {
    set _prog_id [$tvdiarydb query "
      SELECT program_id
      FROM programs
      WHERE channel_id = %s AND title_id = %s
      LIMIT 1
      " $channel_id $title_id]
  }
  if { [llength $_prog_id] == 1 } {
    set prog_id [lindex [lindex $_prog_id 0] 1]
  } else {
    set prog_id {}
  }

  if { $prog_id ne {} } {
    # If there's an existing program entry, check for an unfinished activity of the right type for it that we can update.
    set _act_id [$tvdiarydb query "
      SELECT activity_id
      FROM activities
      WHERE program_id = %s AND type = '%s' AND unfinished = 1
      LIMIT 1
      " $prog_id $activity_type]
    if { [llength $_act_id] == 1 } {
      set act_id [lindex [lindex $_act_id 0] 1]
    } else {
      set act_id {}
    }

    if { $act_id ne {} } {
      # Update the unfinished activity's end time, and remove the ID from the finished activities set.
      $tvdiarydb query "UPDATE activities SET end = %s WHERE activity_id = %s" $log_time $act_id
      set idx [lsearch $finished_activities $act_id]
      set finished_activities [lreplace $finished_activities $idx $idx]
      if { $::logging > 1 } {
        puts "$::logging_time: Updated activity $act_id"
      }

    } else {
      # If no unfinished activity, create a new activity with a start time but zero end time, marked unfinished.
      $tvdiarydb query "
        INSERT INTO activities (program_id, type, start, end, unfinished)
        VALUES (%s, '%s', %s, 0, 1)
        " $prog_id $activity_type $log_time
      if { $::logging } {
        set act_id [$tvdiarydb lastid]
        puts "$::logging_time: Started new activity $act_id, [get_activity_program_details $tvdiarydb $act_id]"
      }
    }
  } else {
    # If there's no existing entry for the program, create a new entry, and a new activity.
    $tvdiarydb query "
      INSERT INTO programs (channel_id, title_id, synopsis_id, start, duration, crid)
      VALUES (%s, %s, %s, %s, %s, '%s')
      " $channel_id $title_id $synopsis_id $start_time $duration $crid
    set prog_id [$tvdiarydb lastid]

    $tvdiarydb query "
      INSERT INTO activities (program_id, type, start, end, unfinished)
      VALUES (%s, '%s', %s, 0, 1)
      " $prog_id $activity_type $log_time
    if { $::logging } {
      set act_id [$tvdiarydb lastid]
      puts "$::logging_time: Started new activity $act_id, [get_activity_program_details $tvdiarydb $act_id]"
    }
  }
}

#
# Get the EPG details from an hsvc. Return as an associative array. With defaults if nothing in the EPG.
#
proc get_epg_from_hsvc { epg_db hsvc time } {
  set records [$epg_db query "
    SELECT SUBSTR(c.szSvcName, 2) AS channel_name, e.name AS title, e.text AS synopsis, e.start, e.end, e.duration, e.event_crid
    FROM epg e, channel.TBL_SVC c
    WHERE c.hSvc = %s
      AND e.service_id = c.usSvcId
      AND e.start <= %s and e.end > %s
    " $hsvc $time $time]
  if { [llength $records] == 1 } {
    set record [lindex $records 0]
    dict set record duration [expr $record(duration) / 60]
  } else {
    set records [$epg_db query "
      SELECT SUBSTR(c.szSvcName, 2) AS channel_name
      FROM channel.TBL_SVC c
      WHERE c.hSvc = %s
      " $hsvc]
    set record [lindex $records 0]
    dict set record title "Not in EPG"
    dict set record synopsis "No information available"
    dict set record start 0
    dict set record end 0
    dict set record duration 0
    dict set record event_crid ""
  }
  return $record
}

#
# Get the EPG details from a channel name. Return as an associative array. With defaults if nothing in the EPG.
#
proc get_epg_from_channel_name { epg_db channel_name time } {
  set records [$epg_db query "
    SELECT e.name AS title, e.text AS synopsis, e.start, e.end, e.duration, e.event_crid
    FROM epg e, channel.TBL_SVC c
    WHERE SUBSTR(c.szSvcName, 2) = '%s'
      AND e.service_id = c.usSvcId
      AND e.start <= %s and e.end > %s
    " $channel_name $time $time]
  if { [llength $records] == 1 } {
    set record [lindex $records 0]
    dict set record duration [expr $record(duration) / 60]
  } else {
    set record {}
    dict set record title "Not in EPG"
    dict set record synopsis "No information available"
    dict set record start 0
    dict set record end 0
    dict set record duration 0
    dict set record event_crid ""
  }
  return $record
}

#
# Add details for a media file being played. Stored like a TV program except blank channel name and no start time or duration.
#
proc log_stream_activity { tvdiarydb &finished_activities activity_type log_time filename } {
  log_program_activity $tvdiarydb finished_activities "P" $log_time "" $filename "" 0 0 ""
}

#
# Report if we're watching live TV.
# The previous assumption was that we're watching live TV if it's not in standby and it's not playing anything else.
# However, that didn't take account of being in the TV Portal but not actually playing anything yet.
# So, instead, humaxtv accessing the "/mnt/hd2/Tsr/0.ts" file is the only signal that we're watching live TV.
#
proc log_watching_live_tv { tvdiarydb epg_db &finished_activities } {
  set hsvc [system param CUR_SVC Value USERCONFIG]

  set epg_record [get_epg_from_hsvc $epg_db $hsvc [clock seconds]]

  log_program_activity $tvdiarydb finished_activities "L" $::current_time $epg_record(channel_name) $epg_record(title) $epg_record(synopsis) $epg_record(start) $epg_record(duration) $epg_record(event_crid)
}

#
# Find the Video files accessed by the humaxtv process.
# Includes .ts files and other media files like .mp4, and checks for the downloaded stream file used by the portal.
# Returns a dictionary map from the FULL path of the file to its current size,
# unless the file appears twice (record & play), where -1 is set instead.
# Because it's a dictionary, files an only appear once.
#
proc get_data { pid } {
  set ret {}
  try {
    set data [exec $::LSOF -p $pid]
    foreach line [split $data "\n"] {
      # Replace multiple whitespaces with single spaces.
      regsub -all -- {[[:space:]]+} $line " " line

      # Filenames include spaces, so instead of splitting, just remove all chars up to the first slash to get the file path.
      set filepath [regsub {^[^/]*} $line {}]
      set type [string tolower [file extension $filepath]]

      # If race conditions cause the file to not exist any more, catch and just treat as if that file wasn't seen.
      try {
        if { [file tail $filepath] eq "Streamer_down_file" || $type eq ".ts" || $type in $::MEDIA_FILE_EXTENSIONS } {
          if { [dict exists $ret $filepath] } {
            # Could be open twice if playing and downloading, not recording.
            # So check the age. Chase playback if it's newly written, else ignore multiple reads.
            set age [expr abs([clock seconds] - [file mtime $filepath])]
            if { $age < $::RECORDING_THRESHOLD } {
              set ret($filepath) -1
            }
          } else {
            set ret($filepath) [file size $filepath]
          }
        }
      } on error { msg } {
        puts "$::logging_time: ** Error getting details of humaxtv file $filepath. Ignoring it. \[$msg\]"
      }
    }
  } on error { msg } {
    puts "$::logging_time: ** Error listing humaxtv files. \[$msg\]"
  }
  return $ret
}

#
# Check whether any daily tasks need to be chained now.
#
proc daily_tasks { tvdiarydb } {
  set done_task 0
  set monthly_summary_enabled [get_setting $tvdiarydb "monthly_summary_enabled" 0]

  if { $monthly_summary_enabled } {
    set time_for_aggregation [get_setting $tvdiarydb "time_for_aggregation" 0]
    if { $::current_time > $time_for_aggregation } {
      source /mod/webif/html/tvdiary/tvdiary_aggregate.jim
      if { [do_aggregate $tvdiarydb $::current_time] } {
        puts "$::logging_time: Succeeded aggregation"
      } else {
        puts "$::logging_time: Failed aggregation"
      }
      set done_task 1
    }
  }
  if { !$done_task } {
    set watchlist_enabled [get_setting $tvdiarydb "watchlist_enabled" 0]
    if { $watchlist_enabled } {
      set time_to_build_watchlist [get_setting $tvdiarydb "time_to_build_watchlist" 0]
      if { $::current_time > $time_to_build_watchlist } {
        source /mod/webif/html/tvdiary/tvdiary_watchlist.jim

        if { [do_build_watchlist $tvdiarydb $::current_time] } {
          puts "$::logging_time: Succeeded building watchlist"
        } else {
          puts "$::logging_time: Failed building watchlist"
        }
        set done_task 1
      }
    }
  }
}

#
# Main
#
proc main {} {
  if { ![file exists $::DB_FILEPATH] } {
    puts "$::logging_time: ** Error, missing the database file $::DB_FILEPATH"
    exit -1
  }

  try {
    set pid [exec $::PGREP -n humaxtv]
  } on error { msg } {
    puts "$::logging_time: ** Error, cannot find humaxtv process. \[$msg\]"
    exit -1
  }

  # Get the data once, wait, then get the data again to see if files are growing as they're recorded.
  set data [get_data $pid]
  if { [llength $data] } {
    sleep $::SLEEP_TIME
    set ndata [get_data $pid]

    #
    # Get a lock for the database.
    #
    if {![acquire_lock tvdiary_db]} {
      puts "$::logging_time: ** Error, cannot acquire exclusive lock for tvdiary.tb. Terminating."
      exit -1
    }
    set tvdiarydb [sqlite3.open $::DB_FILEPATH]

    # Open and attach the EPG and channels DBs.
    set epg_db [sqlite3.open $::EPG_DB_PATH]
    $epg_db query {attach database '%s' as channel} $::CHANNEL_DB_PATH

    #
    # We load the IDs of the activities currently marked as unfinished into this list.
    # As we update activities we remove their IDs from the list. At the end, any IDs
    # remaining will be the ones previously marked as unfinished but are now finished.
    #
    set finished_activities [load_unfinished_activities $tvdiarydb]

    # Track what's being watched at the moment, for guessing live watching if nothing else.
    set recording_channels {}
    set playing_channels {}
    set watching_live {}

    foreach filepath [array names ndata] {
      # Catch errors dealing with individual files so if one has been deleted since it was seen, only that one gets ignored and the rest get processed as normal.
      try {
        if { ![dict exists $data $filepath] } {
          # New file exists that didn't on the first pass.
          # Could be recording or playback. Check the age to decide whether to show size static or growing.
          set age [expr abs([clock seconds] - [file mtime $filepath])]
          if { $age < $::RECORDING_THRESHOLD } {
            set data($filepath) 0
          } else {
            set data($filepath) $ndata($filepath)
          }
          if { $::logging > 2 } {
            puts "$::logging_time: Newly opened $filepath age=$age"
          }
        }

        set filename [file tail $filepath]
        set extension [string tolower [file extension $filename]]
        if { $extension eq ".ts" } {
          set basename [file rootname $filename]
          set ts [ts fetch $filepath]
          if { $ts == 0 } {
            throw error "Unable to fetch $filepath details."
          }
          set channel_name [$ts get channel_name]
          set title [$ts get title]
          set synopsis [$ts get synopsis]
          set schedstart [$ts get schedstart]
          set scheddur [expr [$ts get scheddur] / 60]

          if { [file exists "/mod/tmp/webif_auto/decrypting.$basename.ts"] } {
            # "Decrypting"
            if { $::logging > 2 } {
              puts "$::logging_time: Decrypting /mod/tmp/webif_auto/decrypting.$basename.ts"
            }

          } elseif { $filepath eq "/mnt/hd2/Tsr/0.ts" } {
            # This file exists only when watching live TV. "Time Shift Recording" I assume.
            if { $::include_live_tv } {
              if { $::logging > 2 } {
                puts "$::logging_time: L [expr $ndata($filepath) - $data($filepath)] change ($ndata($filepath) - $data($filepath)) $filepath"
              }
              log_watching_live_tv $tvdiarydb $epg_db finished_activities
              dict set watching_live "TSR" 1
            }

          } elseif { ($data($filepath) == -1) || ($ndata($filepath) == -1) } {
            # "Chase Playing"
            if { $::logging > 2 } {
              puts "$::logging_time: RP $ndata($filepath) & $data($filepath) $filepath"
            }
            set epg_rec [get_epg_from_channel_name $epg_db $channel_name [clock seconds]]
            log_program_activity $tvdiarydb finished_activities "R" $::current_time $channel_name $title $synopsis $schedstart $scheddur $epg_rec(event_crid)
            log_program_activity $tvdiarydb finished_activities "P" $::current_time $channel_name $title $synopsis $schedstart $scheddur ""
            dict set recording_channels $channel_name 1
            dict set playing_channels $channel_name 1

          } elseif { $ndata($filepath) > $data($filepath) } {
            # "Recording"
            if { $::logging > 2 } {
              puts "$::logging_time: R [expr $ndata($filepath) - $data($filepath)] growth ($ndata($filepath) - $data($filepath)) $filepath"
            }
            set epg_rec [get_epg_from_channel_name $epg_db $channel_name [clock seconds]]
            log_program_activity $tvdiarydb finished_activities "R" $::current_time $channel_name $title $synopsis $schedstart $scheddur $epg_rec(event_crid)
            dict set recording_channels $channel_name 1

          } else {
            # "Playing"
            if { $::logging > 2 } {
              puts "$::logging_time: P [expr $ndata($filepath) - $data($filepath)] difference ($ndata($filepath) - $data($filepath)) $filepath"
            }
            log_program_activity $tvdiarydb finished_activities "P" $::current_time $channel_name $title $synopsis $schedstart $scheddur ""
            dict set playing_channels $channel_name 1
          }

        } elseif { $extension in $::MEDIA_FILE_EXTENSIONS } {
          # "Playing .mp4 etc"
          if { $::logging > 2 } {
            puts "$::logging_time: P $filepath"
          }
          log_stream_activity $tvdiarydb finished_activities "P" $::current_time $filename
          dict set playing_channels $filename 1

        } elseif { $filename eq "Streamer_down_file" } {
          # "Playing network streamed media"
          if { $::logging > 2 } {
            puts "$::logging_time: P Network streamed media"
          }
          log_stream_activity $tvdiarydb finished_activities "P" $::current_time "Network streamed media"
          dict set playing_channels "Network streamed media" 1
        }
      } on error { msg } {
        # If there was any problem, abort processing this file but continue with the rest.
        # Likely errors at [file mtime $filepath] & [ts fetch $filepath].
        # The result should be that log_program_activity isn't called, and the recording/playing will appear ended.
        puts "$::logging_time: ** Error processing details of file $filepath. Ignoring it. \[$msg\]"
      }
    }

    # Speculative check for watching live, in case live watching a program that's also being recorded.
    if { [llength $watching_live] == 0 && [llength $playing_channels] == 0 && ![system instandby] } {
      set hsvc [system param CUR_SVC Value USERCONFIG]

      set epg_record [get_epg_from_hsvc $epg_db $hsvc [clock seconds]]
      set channel_name $epg_record(channel_name)

      if { [dict exists $recording_channels $channel_name] } {
        if { $::logging > 2 } {
          puts "$::logging_time: L $channel_name because not watching anything else and $channel_name is being recorded"
        }
        log_program_activity $tvdiarydb finished_activities "L" $::current_time $channel_name $epg_record(title) $epg_record(synopsis) $epg_record(start) $epg_record(duration) $epg_record(event_crid)
      }
    }

    # Update any activities that are now finished.
    update_finished_activities $tvdiarydb finished_activities

    # Close the EPG DB before daily tasks, as we attach those DBs to the tvdiary DB for the watchlist.
    $epg_db close

    # Check whether to carry on to perform daily tasks.
    daily_tasks $tvdiarydb

    $tvdiarydb close
  } else {
    # For the cases where there is no activity after a recording finishes, need to mark everything as finished.

    #
    # Get a lock for the database.
    #
    if {![acquire_lock tvdiary_db]} {
      puts "$::logging_time: ** Error, cannot acquire exclusive lock for tvdiary.tb."
      exit -1
    }
    set tvdiarydb [sqlite3.open $::DB_FILEPATH]

    set finished_activities [load_unfinished_activities $tvdiarydb]
    if { [llength $finished_activities] > 0 } {
      puts "$::logging_time: Inactivity cleanup of [llength $finished_activities] finished activities."
      # Update any activities that are now finished.
      update_finished_activities $tvdiarydb finished_activities
    }

    # Check whether to carry on to perform daily tasks.
    daily_tasks $tvdiarydb

    $tvdiarydb close
  }

  #
  # Closed the DB so release the lock.
  #
  release_lock tvdiary_db
}

main
